diff --git a/src/main/java/org/dlang/dmd/astbase.java b/src/main/java/org/dlang/dmd/astbase.java
index a5abe6a..b5ce756 100644
--- a/src/main/java/org/dlang/dmd/astbase.java
+++ b/src/main/java/org/dlang/dmd/astbase.java
@@ -2254,7 +2254,10 @@ public class astbase {
             public DArray<BaseClass> baseclasses;
             public int baseok;
             public  ClassDeclaration(Loc loc, Identifier id, DArray<BaseClass> baseclasses, DArray<Dsymbol> members, boolean inObject) {
-                super(loc, id == null ? Identifier.generateId(new BytePtr("__anonclass")) : id);
+                if (!(id != null))
+                    id = Identifier.generateId(new BytePtr("__anonclass"));
+                assert(id != null);
+                super(loc, id);
                 if (baseclasses != null)
                 {
                     this.baseclasses = baseclasses;
@@ -4609,7 +4612,7 @@ public class astbase {
                 this.arguments = arguments;
             }
 
-            public  TypeTuple(DArray<Expression> exps, int tag) {
+            public  TypeTuple(DArray<Expression> exps) {
                 super((byte)37);
                 DArray<Parameter> arguments = new DArray<Parameter>();
                 if (exps != null)
@@ -5670,7 +5673,7 @@ public class astbase {
                                 break;
                             case 31:
                             case 14:
-                                this.value = (long)(int)this.value;
+                                this.value = (long)(byte)this.value;
                                 break;
                             case 15:
                                 this.value = (long)(short)this.value;
@@ -5678,7 +5681,7 @@ public class astbase {
                             case 32:
                             case 16:
                                 __dispatch5 = 0;
-                                this.value = (long)(int)this.value;
+                                this.value = (long)(short)this.value;
                                 break;
                             case 17:
                                 this.value = (long)(int)this.value;
@@ -6411,7 +6414,9 @@ public class astbase {
         public static class VarExp extends SymbolExp
         {
             public  VarExp(Loc loc, Declaration var, boolean hasOverloads) {
-                super(loc, TOK.variable, 29, var, var.isVarDeclaration() == null && hasOverloads);
+                if (var.isVarDeclaration() != null)
+                    hasOverloads = false;
+                super(loc, TOK.variable, 29, var, hasOverloads);
                 this.type = var.type;
             }
 
@@ -8276,6 +8281,11 @@ public class astbase {
             public ForeachStatement aggrfe;
             public ForeachRangeStatement rangefe;
             public  StaticForeach(Loc loc, ForeachStatement aggrfe, ForeachRangeStatement rangefe) {
+                {
+                    {
+                        assert(!(!(aggrfe != null)) ^ !(!(rangefe != null)));
+                    }
+                }
                 super();
                 this.loc = loc.copy();
                 this.aggrfe = aggrfe;
diff --git a/src/main/java/org/dlang/dmd/lexer.java b/src/main/java/org/dlang/dmd/lexer.java
index ba0e307..202cd9a 100644
--- a/src/main/java/org/dlang/dmd/lexer.java
+++ b/src/main/java/org/dlang/dmd/lexer.java 
@@ -1247,6 +1239,7 @@ public class lexer {
                     } while(__dispatch10 != 0);
                 }
             }
+            throw new AssertionError("Unreachable code!");
         }
 
         public  void delimitedStringConstant(Token result) {
@@ -1632,25 +1625,18 @@ public class lexer {
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
                                     if ((((isalpha((this.p.get(1) & 0xFF))) != 0 || (this.p.get(1) & 0xFF) == 95) || ((this.p.get(1) & 0xFF) & 128) != 0))
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 105:
                                 case 102:
                                 case 70:
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 95:
                                     this.p.plusAssign(1);
                                     base = 8;
                                     break;
                                 case 76:
-                                    if ((this.p.get(1) & 0xFF) == 105) {
-                                        /*goto Lreal*/
-                                        this.p = pcopy(start);
-                                        return this.inreal(t);
-                                    }
+                                    if ((this.p.get(1) & 0xFF) == 105)
+                                        /*goto Lreal*/throw Dispatch.INSTANCE;
                                     break;
                                 default:
                                 break;
diff --git a/src/main/java/org/dlang/dmd/parse.java b/src/main/java/org/dlang/dmd/parse.java
index 45a19b9..3fabb79 100644
--- a/src/main/java/org/dlang/dmd/parse.java
+++ b/src/main/java/org/dlang/dmd/parse.java
@@ -713,9 +713,7 @@ public class parse {
                                 case 174:
                                     ASTBase.Expression e = null;
                                     {
-                                        Ref<ASTBase.Expression> depmsg_ref = ref((pAttrs).depmsg);
-                                        long _stc = this.parseDeprecatedAttribute(depmsg_ref);
-                                        pAttrs.depmsg = depmsg_ref.value;
+                                        long _stc = this.parseDeprecatedAttribute((pAttrs).depmsg);
                                         if ((_stc) != 0)
                                         {
                                             stc = _stc;
@@ -1873,17 +1871,11 @@ public class parse {
                             link = LINK.objc;
                             this.nextToken();
                         }
-                        else {
-                            /*goto LinvalidLinkage*/
-                            this.error(new BytePtr("valid linkage identifiers are `D`, `C`, `C++`, `Objective-C`, `Pascal`, `Windows`, `System`"));
-                            link = LINK.d;
-                        }
-                    }
-                    else {
-                        /*goto LinvalidLinkage*/
-                        this.error(new BytePtr("valid linkage identifiers are `D`, `C`, `C++`, `Objective-C`, `Pascal`, `Windows`, `System`"));
-                        link = LINK.d;
+                        else
+                            /*goto LinvalidLinkage*/throw Dispatch.INSTANCE;
                     }
+                    else
+                        /*goto LinvalidLinkage*/throw Dispatch.INSTANCE;
                 }
                 else if (pequals(id, Id.System))
                 {
@@ -2436,15 +2428,12 @@ public class parse {
                                             this.nextToken();
                                         }
                                         else
-                                            /*goto _else*/ {
-                                            __dispatch9 = 0;
-                                                at = this.parseType(ptr(ai), null);
-                                            }
+                                            /*goto _else*/{ __dispatch9 = -2; continue dispatched_9; }
                                     }
                                     else
                                     {
                                     /*_else:*/
-                                    //case -2:
+                                    case -2:
                                     __dispatch9 = 0;
                                         at = this.parseType(ptr(ai), null);
                                     }
@@ -3287,9 +3276,9 @@ public class parse {
                     default:
                     return t;
                 }
-                //throw new AssertionError("Unreachable code!");
+                throw new AssertionError("Unreachable code!");
             }
-            //throw new AssertionError("Unreachable code!");
+            throw new AssertionError("Unreachable code!");
         }
 
         public  ASTBase.Type parseDeclarator(ASTBase.Type t, IntPtr palt, Ptr<Identifier> pident, Ptr<DArray<ASTBase.TemplateParameter>> tpl, long storageClass, IntPtr pdisable, Ptr<DArray<ASTBase.Expression>> pudas) {
@@ -4030,8 +4019,7 @@ public class parse {
             boolean literal = f.isFuncLiteralDeclaration() != null;
             this.linkage = LINK.d;
             boolean requireDo = false;
-        L1:
-            while(true)
+        /*L1:*/
             {
                 int __dispatch23 = 0;
                 dispatched_23:
@@ -4086,7 +4074,7 @@ public class parse {
                                 (f.frequires).push(this.parseStatement(6, null, null));
                                 requireDo = true;
                             }
-                            /*goto L1*/continue L1;
+                            /*goto L1*/throw Dispatch0.INSTANCE;
                         case 176:
                             Loc loc_1 = this.token.loc.copy();
                             this.nextToken();
@@ -4124,13 +4112,13 @@ public class parse {
                                     e_1 = new ASTBase.AssertExp(loc_1, e_1, msg_1);
                                     (f.fensures).push(new ASTBase.Ensure(id, new ASTBase.ExpStatement(loc_1, e_1)));
                                     requireDo = false;
-                                    /*goto L1*/continue L1;
+                                    /*goto L1*/throw Dispatch0.INSTANCE;
                                 }
                                 this.check(TOK.rightParentheses);
                             }
                             (f.fensures).push(new ASTBase.Ensure(id, this.parseStatement(6, null, null)));
                             requireDo = true;
-                            /*goto L1*/continue L1;
+                            /*goto L1*/throw Dispatch0.INSTANCE;
                         case 9:
                             if (!(literal))
                             {
@@ -4160,7 +4148,6 @@ public class parse {
                         break;
                     }
                 } while(__dispatch23 != 0);
-                break;
             }
             if ((literal && !(f.fbody != null)))
             {
@@ -4584,9 +4571,6 @@ public class parse {
             ASTBase.Statement ifbody = null;
             ASTBase.Statement elsebody = null;
             boolean isfinal = false;
-            long stc = 0;
-            long storageClass = 0;
-            ASTBase.Parameter param = null;
             Loc loc = this.token.loc.copy();
             if (((flags & ParseStatementFlags.curly) != 0 && (this.token.value & 0xFF) != 5))
                 this.error(new BytePtr("statement expected to be `{ }`, not `%s`"), this.token.toChars());
@@ -4794,7 +4778,7 @@ public class parse {
                                     s = new ASTBase.ExpStatement(loc, d_1);
                                 }
                                 else
-                                    s = new ASTBase.ExpStatement(loc, (ASTBase.Dsymbol)null);
+                                    s = new ASTBase.ExpStatement(loc, null);
                                 if ((flags & ParseStatementFlags.scope_) != 0)
                                     s = new ASTBase.ScopeStatement(loc, s, this.token.loc);
                                 break;
@@ -4880,7 +4864,7 @@ public class parse {
                                     this.error(new BytePtr("use `{ }` for an empty statement, not `;`"));
                             }
                             this.nextToken();
-                            s = new ASTBase.ExpStatement(loc, (ASTBase.Expression)null);
+                            s = new ASTBase.ExpStatement(loc, null);
                             break;
                         case 187:
                             ASTBase.Statement _body_1 = null;
@@ -4939,7 +4923,7 @@ public class parse {
                                 this.check(TOK.rightParentheses);
                             }
                             Loc endloc_1 = new Loc();
-                            ASTBase.Statement _body_2 = this.parseStatement(2, null, endloc_1);
+                            ASTBase.Statement _body_2 = this.parseStatement(2, null, endloc);
                             s = new ASTBase.ForStatement(loc, _init, condition_2, increment, _body_2, endloc_1);
                             break;
                         case 201:
@@ -4947,11 +4931,12 @@ public class parse {
                             s = this.parseForeach00(loc);
                             break;
                         case 183:
+                            ASTBase.Parameter param = null;
                             ASTBase.Expression condition_3 = null;
                             this.nextToken();
                             this.check(TOK.leftParentheses);
-                            storageClass = 0L;
-                            stc = 0L;
+                            long storageClass = 0L;
+                            long stc = 0L;
                         /*LagainStc:*/
                         case -5:
                         __dispatch27 = 0;
@@ -5320,7 +5305,7 @@ public class parse {
                             this.check(TOK.leftParentheses);
                             exp_5 = this.parseExpression();
                             this.check(TOK.rightParentheses);
-                            _body_6 = this.parseStatement(2, null, endloc_2);
+                            _body_6 = this.parseStatement(2, null, endloc);
                             s = new ASTBase.WithStatement(loc, exp_5, _body_6, endloc_2);
                             break;
                         case 197:
@@ -5733,7 +5718,6 @@ public class parse {
                     }
                 } while(__dispatch30 != 0);
             }
-            return null;
         }
 
         public  ASTBase.Expression parseDefaultInitExp() {
@@ -5802,7 +5786,7 @@ public class parse {
         }
 
 
-        public static class NeedDeclaratorId
+        public static class NeedDeclaratorId 
         {
             public static final int no = 0;
             public static final int opt = 1;
@@ -5889,98 +5873,103 @@ public class parse {
                                 t.value = this.peek(t.value);
                                 if (((t.value).value & 0xFF) == 91)
                                 {
-                                    /*goto L4*/{ __dispatch36 = -4; continue dispatched_36; }
+                                    /*goto L4*/throw Dispatch.INSTANCE;
                                 }
                                 /*goto L3*/{ __dispatch36 = -3; continue dispatched_36; }
+                            L_outer18:
+                                for (; (1) != 0;){
                                 /*L2:*/
-                            case -2:
+                                case -2:
                                 __dispatch36 = 0;
                                     t.value = this.peek(t.value);
                                 /*L3:*/
-                            case -3:
+                                case -3:
                                 __dispatch36 = 0;
-                                if (((t.value).value & 0xFF) != 97) break;
-                            /*Ldot:*/
-                            case -5:
-                                    t.value = this.peek(t.value);
-                                    if (((t.value).value & 0xFF) != 120)
-                                        /*goto Lfalse*/throw Dispatch0.INSTANCE;
-                                    t.value = this.peek(t.value);
-                                    if (((t.value).value & 0xFF) != 91)
-                                        /*goto L3*/{ __dispatch36 = -3; continue dispatched_36; }
-                                /*L4:*/
-                            case -4:
-                                    t.value = this.peek(t.value);
+                                    if (((t.value).value & 0xFF) == 97)
                                     {
-                                        int __dispatch37 = 0;
-                                        dispatched_37:
-                                        do {
-                                            switch (__dispatch37 != 0 ? __dispatch37 : ((t.value).value & 0xFF))
-                                            {
-                                                case 120:
-                                                    /*goto L5*/{ __dispatch36 = -1; continue dispatched_36; }
-                                                case 1:
-                                                    if (!(this.skipParens(t.value, ptr(t))))
-                                                        /*goto Lfalse*/throw Dispatch0.INSTANCE;
-                                                    /*goto L3*/{ __dispatch36 = -3; continue dispatched_36; }
-                                                case 149:
-                                                case 150:
-                                                case 151:
-                                                case 148:
-                                                case 129:
-                                                case 130:
-                                                case 131:
-                                                case 132:
-                                                case 133:
-                                                case 134:
-                                                case 135:
-                                                case 136:
-                                                case 137:
-                                                case 138:
-                                                case 139:
-                                                case 140:
-                                                case 141:
-                                                case 142:
-                                                case 143:
-                                                case 144:
-                                                case 145:
-                                                case 146:
-                                                case 147:
-                                                case 128:
-                                                case 105:
-                                                case 106:
-                                                case 107:
-                                                case 108:
-                                                case 109:
-                                                case 110:
-                                                case 111:
-                                                case 112:
-                                                case 113:
-                                                case 114:
-                                                case 115:
-                                                case 116:
-                                                case 13:
-                                                case 15:
-                                                case 16:
-                                                case 117:
-                                                case 118:
-                                                case 119:
-                                                case 121:
-                                                case 122:
-                                                case 219:
-                                                case 220:
-                                                case 218:
-                                                case 221:
-                                                case 222:
-                                                case 223:
-                                                    /*goto L2*/{ __dispatch36 = -2; continue dispatched_36; }
-                                                default:
-                                                /*goto Lfalse*/throw Dispatch0.INSTANCE;
-                                            }
-                                        } while(__dispatch37 != 0);
+                                    /*Ldot:*/
+                                        t.value = this.peek(t.value);
+                                        if (((t.value).value & 0xFF) != 120)
+                                            /*goto Lfalse*/throw Dispatch0.INSTANCE;
+                                        t.value = this.peek(t.value);
+                                        if (((t.value).value & 0xFF) != 91)
+                                            /*goto L3*/{ __dispatch36 = -3; continue dispatched_36; }
+                                    /*L4:*/
+                                        t.value = this.peek(t.value);
+                                        {
+                                            int __dispatch37 = 0;
+                                            dispatched_37:
+                                            do {
+                                                switch (__dispatch37 != 0 ? __dispatch37 : ((t.value).value & 0xFF))
+                                                {
+                                                    case 120:
+                                                        /*goto L5*/{ __dispatch36 = -1; continue dispatched_36; }
+                                                    case 1:
+                                                        if (!(this.skipParens(t.value, ptr(t))))
+                                                            /*goto Lfalse*/throw Dispatch0.INSTANCE;
+                                                        /*goto L3*/{ __dispatch36 = -3; continue dispatched_36; }
+                                                    case 149:
+                                                    case 150:
+                                                    case 151:
+                                                    case 148:
+                                                    case 129:
+                                                    case 130:
+                                                    case 131:
+                                                    case 132:
+                                                    case 133:
+                                                    case 134:
+                                                    case 135:
+                                                    case 136:
+                                                    case 137:
+                                                    case 138:
+                                                    case 139:
+                                                    case 140:
+                                                    case 141:
+                                                    case 142:
+                                                    case 143:
+                                                    case 144:
+                                                    case 145:
+                                                    case 146:
+                                                    case 147:
+                                                    case 128:
+                                                    case 105:
+                                                    case 106:
+                                                    case 107:
+                                                    case 108:
+                                                    case 109:
+                                                    case 110:
+                                                    case 111:
+                                                    case 112:
+                                                    case 113:
+                                                    case 114:
+                                                    case 115:
+                                                    case 116:
+                                                    case 13:
+                                                    case 15:
+                                                    case 16:
+                                                    case 117:
+                                                    case 118:
+                                                    case 119:
+                                                    case 121:
+                                                    case 122:
+                                                    case 219:
+                                                    case 220:
+                                                    case 218:
+                                                    case 221:
+                                                    case 222:
+                                                    case 223:
+                                                        /*goto L2*/{ __dispatch36 = -2; continue dispatched_36; }
+                                                    default:
+                                                    /*goto Lfalse*/throw Dispatch0.INSTANCE;
+                                                }
+                                            } while(__dispatch37 != 0);
+                                        }
                                     }
+                                    break;
+                                }
+                                break;
                             case 97:
-                                /*goto Ldot*/{ __dispatch36 = -5; continue dispatched_36; }
+                                /*goto Ldot*/throw Dispatch.INSTANCE;
                             case 39:
                             case 229:
                                 t.value = this.peek(t.value);
@@ -6220,7 +6209,7 @@ public class parse {
                     } while(__dispatch39 != 0);
                 }
             }
-            //throw new AssertionError("Unreachable code!");
+            throw new AssertionError("Unreachable code!");
         }
 
         public  boolean isParameters(Ptr<Token> pt) {
@@ -6231,7 +6220,7 @@ public class parse {
         L_outer20:
             for (; (1) != 0;t.value = this.peek(t.value)){
             /*L1:*/
-                while (true) try {
+                {
                     int __dispatch41 = 0;
                     dispatched_41:
                     do {
@@ -6266,7 +6255,7 @@ public class parse {
                                 }
                                 /*goto L1*/throw Dispatch0.INSTANCE;
                             default:
-
+                            {
                                 if (!(this.isBasicType(ptr(t))))
                                     return false;
                             /*L2:*/
@@ -6286,7 +6275,7 @@ public class parse {
                                     t.value = this.peek(t.value);
                                     break;
                                 }
-
+                            }
                             if (((t.value).value & 0xFF) == 99)
                             {
                                 continue L_outer20;
@@ -6294,8 +6283,7 @@ public class parse {
                             break;
                         }
                     } while(__dispatch41 != 0);
-                    break;
-                } catch(Dispatch0 __d0) {}
+                }
                 break;
             }
             if (((t.value).value & 0xFF) != 2)
@@ -6666,7 +6654,7 @@ public class parse {
                             this.nextToken();
                             break;
                         case 118:
-                            e = new ASTBase.IntegerExp(loc, (long)(int)this.token.intvalue, ASTBase.Type.twchar);
+                            e = new ASTBase.IntegerExp(loc, (long)(short)this.token.intvalue, ASTBase.Type.twchar);
                             this.nextToken();
                             break;
                         case 119:
