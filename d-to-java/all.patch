diff --git a/src/main/java/org/dlang/dmd/astbase.java b/src/main/java/org/dlang/dmd/astbase.java
index 68ca637..18a23f3 100644
--- a/src/main/java/org/dlang/dmd/astbase.java
+++ b/src/main/java/org/dlang/dmd/astbase.java
@@ -5951,7 +5951,7 @@ public class astbase {
                                 break;
                             case 31:
                             case 14:
-                                this.value = (long)(int)this.value;
+                                this.value = (long)(byte)this.value;
                                 break;
                             case 15:
                                 this.value = (long)(int)this.value;
diff --git a/src/main/java/org/dlang/dmd/lexer.java b/src/main/java/org/dlang/dmd/lexer.java
index 3f005db..4e93611 100644
--- a/src/main/java/org/dlang/dmd/lexer.java
+++ b/src/main/java/org/dlang/dmd/lexer.java
@@ -1357,6 +1357,7 @@ public class lexer {
                     } while(__dispatch10 != 0);
                 }
             }
+            throw new AssertionError("Unreachable code!");
         }
 
         public  void delimitedStringConstant(Ptr<Token> result) {
@@ -1780,15 +1781,11 @@ public class lexer {
                                     {
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
                                     }
-                                    /*goto Lreal*/
-                                    this.p.value = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 105:
                                 case 102:
                                 case 70:
-                                    /*goto Lreal*/
-                                    this.p.value = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 95:
                                     this.p.value.plusAssign(1);
                                     base = 8;
@@ -1796,9 +1793,7 @@ public class lexer {
                                 case 76:
                                     if (((this.p.value.get(1) & 0xFF) == 105))
                                     {
-                                        /*goto Lreal*/
-                                        this.p.value = pcopy(start);
-                                        return this.inreal(t);
+                                        /*goto Lreal*/throw Dispatch.INSTANCE;
                                     }
                                     break;
                                 default:
diff --git a/src/main/java/org/dlang/dmd/parse.java b/src/main/java/org/dlang/dmd/parse.java
index 38dee87..0c8372c 100644
--- a/src/main/java/org/dlang/dmd/parse.java
+++ b/src/main/java/org/dlang/dmd/parse.java
@@ -3643,9 +3643,9 @@ public class parse {
                     default:
                     return t;
                 }
-                //throw new AssertionError("Unreachable code!");
+                throw new AssertionError("Unreachable code!");
             }
-            //throw new AssertionError("Unreachable code!");
+            throw new AssertionError("Unreachable code!");
         }
 
         public  ASTBase.Type parseDeclarator(ASTBase.Type t, Ptr<Integer> palt, Ptr<Identifier> pident, Ptr<Ptr<DArray<ASTBase.TemplateParameter>>> tpl, long storageClass, Ptr<Integer> pdisable, Ptr<Ptr<DArray<ASTBase.Expression>>> pudas) {
@@ -4470,8 +4470,7 @@ public class parse {
             boolean literal = f.isFuncLiteralDeclaration() != null;
             this.linkage = LINK.d;
             boolean requireDo = false;
-        L1:
-            while(true)
+        /*L1:*/
             {
                 int __dispatch23 = 0;
                 dispatched_23:
@@ -4532,7 +4531,7 @@ public class parse {
                                 (f.frequires.get()).push(this.parseStatement(6, null, null));
                                 requireDo = true;
                             }
-                            /*goto L1*/continue L1;
+                            /*goto L1*/throw Dispatch0.INSTANCE;
                         case 176:
                             Loc loc_1 = this.token.value.loc.copy();
                             this.nextToken();
@@ -4621,7 +4620,6 @@ public class parse {
                         break;
                     }
                 } while(__dispatch23 != 0);
-                break;
             }
             if (literal && (f.fbody == null))
             {
@@ -5045,9 +5043,6 @@ public class parse {
                 return new ASTBase.StaticForeachDeclaration(new ASTBase.StaticForeach(loc, aggrfe, null), this.parseBlock(pLastDecl, null));
             }
         }
-            long stc = 0;
-            long storageClass = 0;
-            ASTBase.Parameter param = null;
 
 
         public  ASTBase.Statement parseStatement(int flags, Ptr<BytePtr> endPtr, Ptr<Loc> pEndloc) {
@@ -5282,7 +5277,7 @@ public class parse {
                                 }
                                 else
                                 {
-                                    s = new ASTBase.ExpStatement(loc, (ASTBase.Dsymbol)null);
+                                    s = new ASTBase.ExpStatement(loc, null);
                                 }
                                 if ((flags & ParseStatementFlags.scope_) != 0)
                                 {
@@ -5391,7 +5386,7 @@ public class parse {
                                 }
                             }
                             this.nextToken();
-                            s = new ASTBase.ExpStatement(loc, (ASTBase.Expression)null);
+                            s = new ASTBase.ExpStatement(loc, null);
                             break;
                         case 187:
                             ASTBase.Statement _body_1 = null;
@@ -5462,11 +5457,12 @@ public class parse {
                             s = this.parseForeach00(loc);
                             break;
                         case 183:
+                            ASTBase.Parameter param = null;
                             ASTBase.Expression condition_3 = null;
                             this.nextToken();
                             this.check(TOK.leftParentheses);
-                            storageClass = 0L;
-                            stc = 0L;
+                            long storageClass = 0L;
+                            long stc = 0L;
                         /*LagainStc:*/
                         case -5:
                         __dispatch27 = 0;
@@ -6334,7 +6330,6 @@ public class parse {
                     }
                 } while(__dispatch30 != 0);
             }
-            return null;
         }
 
         public  ASTBase.Expression parseDefaultInitExp() {
@@ -6409,7 +6404,7 @@ public class parse {
         }
 
 
-        public static class NeedDeclaratorId
+        public static class NeedDeclaratorId 
         {
             public static final int no = 0;
             public static final int opt = 1;
@@ -6889,7 +6884,7 @@ public class parse {
                     } while(__dispatch39 != 0);
                 }
             }
-            //throw new AssertionError("Unreachable code!");
+            throw new AssertionError("Unreachable code!");
         }
 
         // defaulted all parameters starting with #5
@@ -6907,7 +6902,7 @@ public class parse {
         L_outer20:
             for (; 1 != 0;t.value = pcopy(this.peek(t.value))){
             /*L1:*/
-                while (true) try {
+                {
                     int __dispatch41 = 0;
                     dispatched_41:
                     do {
@@ -6944,7 +6939,7 @@ public class parse {
                                 }
                                 /*goto L1*/throw Dispatch0.INSTANCE;
                             default:
-
+                            {
                                 if (!this.isBasicType(ptr(t)))
                                 {
                                     return false;
@@ -6964,7 +6959,7 @@ public class parse {
                                     {
                                         return false;
                                     }
-
+                                }
                                 if ((((t.value.get()).value & 0xFF) == 10))
                                 {
                                     t.value = pcopy(this.peek(t.value));
@@ -6978,8 +6973,7 @@ public class parse {
                             break;
                         }
                     } while(__dispatch41 != 0);
-                    break;
-                } catch(Dispatch0 __d0) {}
+                }
                 break;
             }
             if ((((t.value.get()).value & 0xFF) != 2))
