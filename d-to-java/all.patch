diff --git a/src/main/java/org/dlang/dmd/identifier.java b/src/main/java/org/dlang/dmd/identifier.java
index fbd44e5..a6b34e4 100644
--- a/src/main/java/org/dlang/dmd/identifier.java
+++ b/src/main/java/org/dlang/dmd/identifier.java
@@ -144,6 +144,11 @@ public class identifier {
 
         public static Identifier generateIdWithLoc(ByteSlice prefix, Loc loc) {
             OutBuffer idBuf = new OutBuffer();
+            Function0<Integer> __lambda7 = new Function0<Integer>(){
+                public Integer invoke(){
+                    return 1;
+                }
+            };
             Function1<Integer,Integer> __lambda8 = new Function1<Integer,Integer>(){
                 public Integer invoke(Integer counter){
                     idBuf.writestring( new ByteSlice("_"));
@@ -151,11 +156,6 @@ public class identifier {
                     return counter + 1;
                 }
             };
-            Function0<Integer> __lambda7 = new Function0<Integer>(){
-                public Integer invoke(){
-                    return 1;
-                }
-            };
             try {
                 idBuf.writestring(prefix);
                 idBuf.writestring( new ByteSlice("_L"));
@@ -178,7 +178,7 @@ public class identifier {
             Identifier id = (Identifier)(sv).ptrvalue;
             if (!(id != null))
             {
-                id = new Identifier(s.copy(), 120);
+                id = new Identifier((sv).asString(), 120);
                 (sv).ptrvalue = pcopy((id));
             }
             return id;
@@ -191,7 +191,7 @@ public class identifier {
         public static Identifier idPool(ByteSlice s, int value) {
             StringValue sv = Identifier.stringtable.insert(s, null);
             assert(sv != null);
-            Identifier id = new Identifier(s.copy(), value);
+            Identifier id = new Identifier((sv).asString(), value);
             (sv).ptrvalue = pcopy((id));
             return id;
         }
diff --git a/src/main/java/org/dlang/dmd/lexer.java b/src/main/java/org/dlang/dmd/lexer.java
index 296bc8e..2796fdd 100644
--- a/src/main/java/org/dlang/dmd/lexer.java
+++ b/src/main/java/org/dlang/dmd/lexer.java
@@ -381,26 +381,17 @@ public class lexer {
                                         if (id.equals(Id.DATE))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scandate));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIME))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scantime));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.VENDOR))
                                         {
                                             (t).ustring = pcopy((toBytePtr(xarraydup(global.vendor))));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIMESTAMP))
                                         {
@@ -992,10 +983,10 @@ public class lexer {
         }
 
         public  int escapeSequence() {
-            return escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
+            return Lexer.escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
         }
 
-        public int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr sequence) {
+        public static int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr sequence) {
             {
                 assert(handler != null);
             }
@@ -1004,7 +995,7 @@ public class lexer {
                     assert(handler != null);
                 }
             }
-            p = pcopy(sequence);
+            BytePtr p = pcopy(sequence);
             try {
                 int c = (p.get(0) & 0xFF);
                 int ndigits = 0;
@@ -1101,7 +1092,7 @@ public class lexer {
                                                 c = HtmlNamedEntity(idstart, ((p.minus(idstart)) / 1));
                                                 if (c == -1)
                                                 {
-                                                    handler.error(loc, new BytePtr("unnamed character entity &%s;"), idstart.slice(0, p.minus(idstart)));
+                                                    handler.error(loc, new BytePtr("unnamed character entity &%.*s;"), (p.minus(idstart)) / 1, idstart);
                                                     c = 63;
                                                 }
                                                 p.postInc();
@@ -1110,7 +1101,7 @@ public class lexer {
                                             {
                                                 if ((isalpha((p.get(0) & 0xFF))) != 0 || p != idstart && (isdigit((p.get(0) & 0xFF))) != 0)
                                                     continue;
-                                                handler.error(loc, new BytePtr("unterminated named entity &%s;"), idstart.slice(0, p.minus(idstart)));
+                                                handler.error(loc, new BytePtr("unterminated named entity &%.*s;"), (p.minus(idstart)) / 1 + 1, idstart);
                                                 c = 63;
                                                 break;
                                             }
@@ -1152,6 +1143,7 @@ public class lexer {
                 return c;
             }
             finally {
+                sequence = pcopy(p);
             }
         }
 
@@ -1281,6 +1273,7 @@ public class lexer {
                     } while(__dispatch10 != 0);
                 }
             }
+            throw new AssertionError("Unreachable code!");
         }
 
         public  void delimitedStringConstant(Token result) {
@@ -1672,25 +1665,18 @@ public class lexer {
                                         /*goto Ldone*/throw Dispatch.INSTANCE;
                                     if ((isalpha((this.p.get(1) & 0xFF))) != 0 || (this.p.get(1) & 0xFF) == 95 || ((this.p.get(1) & 0xFF) & 128) != 0)
                                         /*goto Ldone*/throw Dispatch.INSTANCE;
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 105:
                                 case 102:
                                 case 70:
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 95:
                                     this.p.plusAssign(1);
                                     base = 8;
                                     break;
                                 case 76:
-                                    if ((this.p.get(1) & 0xFF) == 105) {
-                                        /*goto Lreal*/
-                                        this.p = pcopy(start);
-                                        return this.inreal(t);
-                                    }
+                                    if ((this.p.get(1) & 0xFF) == 105)
+                                        /*goto Lreal*/throw Dispatch.INSTANCE;
                                     break;
                                 default:
                                 {
@@ -2307,6 +2293,7 @@ public class lexer {
                                         continue;
                                     /*goto Lnewline*/{ __dispatch26 = -1; continue dispatched_26; }
                                 default:
+                                {
                                     if ((c & 0xFF) == 226)
                                     {
                                         if ((q.get(1) & 0xFF) == 128 && (q.get(2) & 0xFF) == 168 || (q.get(2) & 0xFF) == 169)
@@ -2321,6 +2308,7 @@ public class lexer {
                                 case -1:
                                 __dispatch26 = 0;
                                     c = (byte)10;
+                                }
                                 case 10:
                                     linestart = 1;
                                     trimTrailingWhitespace.invoke();
