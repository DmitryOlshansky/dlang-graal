diff --git a/src/main/java/org/dlang/dmd/astbase.java b/src/main/java/org/dlang/dmd/astbase.java
index 5e5257f..7d1a7d1 100644
--- a/src/main/java/org/dlang/dmd/astbase.java
+++ b/src/main/java/org/dlang/dmd/astbase.java
@@ -1987,7 +1987,10 @@ public class astbase {
             public DArray<BaseClass> baseclasses;
             public int baseok;
             public  ClassDeclaration(Loc loc, Identifier id, DArray<BaseClass> baseclasses, DArray<Dsymbol> members, boolean inObject) {
-                super(loc, id == null ? Identifier.generateId(new BytePtr("__anonclass")) : id);
+                if (!(id != null))
+                    id = Identifier.generateId(new BytePtr("__anonclass"));
+                assert(id != null);
+                super(loc, id);
                 if (baseclasses != null)
                 {
                     this.baseclasses = baseclasses;
@@ -4314,7 +4317,7 @@ public class astbase {
                 this.arguments = arguments;
             }
 
-            public  TypeTuple(DArray<Expression> exps, int tag) {
+            public  TypeTuple(DArray<Expression> exps) {
                 super((byte)37);
                 DArray<Parameter> arguments = new DArray<Parameter>();
                 if (exps != null)
@@ -5908,7 +5911,9 @@ public class astbase {
         public static class VarExp extends SymbolExp
         {
             public  VarExp(Loc loc, Declaration var, boolean hasOverloads) {
-                super(loc, TOK.variable, 29, var, var.isVarDeclaration() == null && hasOverloads);
+                if (var.isVarDeclaration() != null)
+                    hasOverloads = false;
+                super(loc, TOK.variable, 29, var, hasOverloads);
                 this.type = var.type;
             }
 
@@ -7450,6 +7455,11 @@ public class astbase {
             public ForeachStatement aggrfe;
             public ForeachRangeStatement rangefe;
             public  StaticForeach(Loc loc, ForeachStatement aggrfe, ForeachRangeStatement rangefe) {
+                {
+                    {
+                        assert(!(!(aggrfe != null)) ^ !(!(rangefe != null)));
+                    }
+                }
                 super();
                 this.loc = loc.copy();
                 this.aggrfe = aggrfe;
diff --git a/src/main/java/org/dlang/dmd/globals.java b/src/main/java/org/dlang/dmd/globals.java
index 8e6cb70..97f7c0d 100644
--- a/src/main/java/org/dlang/dmd/globals.java
+++ b/src/main/java/org/dlang/dmd/globals.java
@@ -257,7 +257,19 @@ public class globals {
         public ByteSlice exefile;
         public ByteSlice mapfile;
         public  boolean isPOSIX() {
-            return this.isLinux || this.isOSX || this.isFreeBSD || this.isOpenBSD || this.isDragonFlyBSD || this.isSolaris;
+            try {
+                __result = this.isLinux || this.isOSX || this.isFreeBSD || this.isOpenBSD || this.isDragonFlyBSD || this.isSolaris;
+                /*goto __returnLabel*/throw Dispatch0.INSTANCE;
+            }
+            catch(Dispatch0 __d){}
+        /*__returnLabel:*/
+            {
+                boolean result = __result;
+                {
+                    assert(result || this.isWindows);
+                }
+            }
+            return __result;
         }
 
         public Param(){
diff --git a/src/main/java/org/dlang/dmd/lexer.java b/src/main/java/org/dlang/dmd/lexer.java
index 760fe2e..0c92a84 100644
--- a/src/main/java/org/dlang/dmd/lexer.java
+++ b/src/main/java/org/dlang/dmd/lexer.java
@@ -373,26 +373,17 @@ public class lexer {
                                         if (id.equals(Id.DATE))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scandate));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIME))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scantime));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.VENDOR))
                                         {
                                             (t).ustring = pcopy((toBytePtr(xarraydup(global.vendor))));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIMESTAMP))
                                         {
@@ -969,13 +960,13 @@ public class lexer {
             return escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
         }
 
-        public int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr sequence) {
+        public static int escapeSequence(Loc loc, DiagnosticReporter handler, Ref<BytePtr> sequence) {
             {
                 {
                     assert(handler != null);
                 }
             }
-            p = pcopy(sequence);
+            BytePtr p = pcopy(sequence.value);
             try {
                 int c = (p.get() & 0xFF);
                 int ndigits = 0;
@@ -1058,7 +1049,7 @@ public class lexer {
                                 }
                                 else
                                 {
-                                    handler.error(loc, new BytePtr("undefined escape hex sequence \\%c%c"), sequence.get(0), c);
+                                    handler.error(loc, new BytePtr("undefined escape hex sequence \\%c%c"), sequence.value.get(0), c);
                                     p.postInc();
                                 }
                                 break;
@@ -1119,6 +1110,7 @@ public class lexer {
                 return c;
             }
             finally {
+                sequence.value = pcopy(p);
             }
         }
 
@@ -1245,6 +1237,7 @@ public class lexer {
                     } while(__dispatch10 != 0);
                 }
             }
+            throw new AssertionError("Unreachable code!");
         }
 
         public  void delimitedStringConstant(Token result) {
@@ -1629,25 +1622,18 @@ public class lexer {
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
                                     if ((isalpha((this.p.get(1) & 0xFF))) != 0 || (this.p.get(1) & 0xFF) == 95 || ((this.p.get(1) & 0xFF) & 128) != 0)
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 105:
                                 case 102:
                                 case 70:
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 95:
                                     this.p.plusAssign(1);
                                     base = 8;
                                     break;
                                 case 76:
-                                    if ((this.p.get(1) & 0xFF) == 105) {
-                                        /*goto Lreal*/
-                                        this.p = pcopy(start);
-                                        return this.inreal(t);
-                                    }
+                                    if ((this.p.get(1) & 0xFF) == 105)
+                                        /*goto Lreal*/throw Dispatch.INSTANCE;
                                     break;
                                 default:
                                 break;
diff --git a/src/main/java/org/dlang/dmd/parse.java b/src/main/java/org/dlang/dmd/parse.java
index 54b09c6..e4f1509 100644
--- a/src/main/java/org/dlang/dmd/parse.java
+++ b/src/main/java/org/dlang/dmd/parse.java
@@ -2353,7 +2353,7 @@ public class parse {
                                     else
                                     {
                                     /*_else:*/
-                                    //case -2:
+                                    case -2:
                                     __dispatch9 = 0;
                                         at = this.parseType(ptr(ai), null);
                                     }
@@ -5290,7 +5290,7 @@ public class parse {
                                 this.error(new BytePtr("`const`/`immutable`/`shared`/`inout` attributes are not allowed on `asm` blocks"));
                             this.check(TOK.leftCurly);
                             Ref<Token> toklist = ref(null);
-                            Token ptoklist = null;
+                            Ptr<Token> ptoklist = pcopy(ptr(toklist));
                             Identifier label = null;
                             DArray<ASTBase.Statement> statements3 = new DArray<ASTBase.Statement>();
                             int nestlevel = 0;
@@ -5338,6 +5338,7 @@ public class parse {
                                                 {
                                                     s = new ASTBase.AsmStatement(this.token.loc, toklist.value);
                                                     toklist.value = null;
+                                                    ptoklist = pcopy(ptr(toklist));
                                                     if (label != null)
                                                     {
                                                         s = new ASTBase.LabelStatement(labelloc, label, s);
@@ -5351,18 +5352,10 @@ public class parse {
                                                 this.error(new BytePtr("matching `}` expected, not end of file"));
                                                 /*goto Lerror*/{ __dispatch27 = -6; continue dispatched_27; }
                                             default:
-                                                if (toklist.value == null) {
-                                                    toklist = ref(this.allocateToken());
-                                                    toklist.value.opAssign(this.token);
-                                                    ptoklist = toklist.value;
-                                                    ptoklist.next = null;
-                                                }
-                                                else {
-                                                    ptoklist.next = this.allocateToken();
-                                                    ptoklist.next.opAssign((this.token));
-                                                    ptoklist = ptoklist.next;
-                                                    ptoklist.next = null;
-                                                }
+                                            ptoklist.set(0, this.allocateToken());
+                                            (ptoklist.get()).opAssign((this.token));
+                                            ptoklist = pcopy((ptr((ptoklist.get()).next)));
+                                            ptoklist.set(0, null);
                                             this.nextToken();
                                             continue L_outer15;
                                         }
@@ -5803,11 +5796,11 @@ public class parse {
                             L_outer18:
                                 for (; (1) != 0;){
                                 /*L2:*/
-                                //case -2:
+                                case -2:
                                 __dispatch36 = 0;
                                     t.value = this.peek(t.value);
                                 /*L3:*/
-                                //case -3:
+                                case -3:
                                 __dispatch36 = 0;
                                     if (((t.value).value & 0xFF) == 97)
                                     {
@@ -6178,7 +6171,7 @@ public class parse {
                                 }
                                 /*goto L1*/throw Dispatch0.INSTANCE;
                             default:
-
+                            {
                                 if (!(this.isBasicType(ptr(t))))
                                     return false;
                             /*L2:*/
@@ -6198,7 +6191,7 @@ public class parse {
                                     t.value = this.peek(t.value);
                                     break;
                                 }
-
+                            }
                             if (((t.value).value & 0xFF) == 99)
                             {
                                 continue L_outer20;
