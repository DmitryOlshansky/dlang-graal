diff --git a/src/main/java/org/dlang/dmd/astbase.java b/src/main/java/org/dlang/dmd/astbase.java
index ed047d6..64d11ea 100644
--- a/src/main/java/org/dlang/dmd/astbase.java
+++ b/src/main/java/org/dlang/dmd/astbase.java
@@ -1983,7 +1983,10 @@ public class astbase {
             public DArray<BaseClass> baseclasses;
             public int baseok;
             public  ClassDeclaration(Loc loc, Identifier id, DArray<BaseClass> baseclasses, DArray<Dsymbol> members, boolean inObject) {
-                super(loc, id == null ? Identifier.generateId(new BytePtr("__anonclass")) : id);
+                if (!(id != null))
+                    id = Identifier.generateId(new BytePtr("__anonclass"));
+                assert(id != null);
+                super(loc, id);
                 if (baseclasses != null)
                 {
                     this.baseclasses = baseclasses;
@@ -4309,7 +4312,7 @@ public class astbase {
                 this.arguments = arguments;
             }
 
-            public  TypeTuple(DArray<Expression> exps, int tag) {
+            public  TypeTuple(DArray<Expression> exps) {
                 super((byte)37);
                 DArray<Parameter> arguments = new DArray<Parameter>();
                 if (exps != null)
@@ -5903,7 +5906,9 @@ public class astbase {
         public static class VarExp extends SymbolExp
         {
             public  VarExp(Loc loc, Declaration var, boolean hasOverloads) {
-                super(loc, TOK.variable, 29, var, var.isVarDeclaration() == null && hasOverloads);
+                if (var.isVarDeclaration() != null)
+                    hasOverloads = false;
+                super(loc, TOK.variable, 29, var, hasOverloads);
                 this.type = var.type;
             }
 
@@ -7443,6 +7448,11 @@ public class astbase {
             public ForeachStatement aggrfe;
             public ForeachRangeStatement rangefe;
             public  StaticForeach(Loc loc, ForeachStatement aggrfe, ForeachRangeStatement rangefe) {
+                {
+                    {
+                        assert(!(!(aggrfe != null)) ^ !(!(rangefe != null)));
+                    }
+                }
                 super();
                 this.loc = loc.copy();
                 this.aggrfe = aggrfe;
@@ -7884,9 +7894,8 @@ public class astbase {
             boolean result = false;
             if ((stc & 17592186568704L) == 17592186568704L)
                 stc &= -524289L;
-            Ref<Long> stc_ref = ref(stc);
-            for (; (stc_ref.value) != 0;){
-                BytePtr p = pcopy(stcToChars(stc_ref));
+            for (; (stc) != 0;){
+                BytePtr p = pcopy(stcToChars(stc));
                 if (p == null)
                     break;
                 if (!(result))
diff --git a/src/main/java/org/dlang/dmd/globals.java b/src/main/java/org/dlang/dmd/globals.java
index 8e6cb70..97f7c0d 100644
--- a/src/main/java/org/dlang/dmd/globals.java
+++ b/src/main/java/org/dlang/dmd/globals.java
@@ -257,7 +257,19 @@ public class globals {
         public ByteSlice exefile;
         public ByteSlice mapfile;
         public  boolean isPOSIX() {
-            return this.isLinux || this.isOSX || this.isFreeBSD || this.isOpenBSD || this.isDragonFlyBSD || this.isSolaris;
+            try {
+                __result = this.isLinux || this.isOSX || this.isFreeBSD || this.isOpenBSD || this.isDragonFlyBSD || this.isSolaris;
+                /*goto __returnLabel*/throw Dispatch0.INSTANCE;
+            }
+            catch(Dispatch0 __d){}
+        /*__returnLabel:*/
+            {
+                boolean result = __result;
+                {
+                    assert(result || this.isWindows);
+                }
+            }
+            return __result;
         }
 
         public Param(){
diff --git a/src/main/java/org/dlang/dmd/lexer.java b/src/main/java/org/dlang/dmd/lexer.java
index 4bc0bc1..1919e06 100644
--- a/src/main/java/org/dlang/dmd/lexer.java
+++ b/src/main/java/org/dlang/dmd/lexer.java
@@ -373,26 +373,17 @@ public class lexer {
                                         if (id.equals(Id.DATE))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scandate));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIME))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scantime));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.VENDOR))
                                         {
                                             (t).ustring = pcopy((toBytePtr(xarraydup(global.vendor))));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIMESTAMP))
                                         {
@@ -975,13 +966,13 @@ public class lexer {
             return escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
         }
 
-        public int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr sequence) {
+        public static int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr sequence) {
             {
                 {
                     assert(handler != null);
                 }
             }
-            p = pcopy(sequence);
+            BytePtr p = pcopy(sequence);
             try {
                 int c = (p.get() & 0xFF);
                 int ndigits = 0;
@@ -1125,6 +1116,7 @@ public class lexer {
                 return c;
             }
             finally {
+                sequence = pcopy(p);
             }
         }
 
@@ -1251,6 +1243,7 @@ public class lexer {
                     } while(__dispatch10 != 0);
                 }
             }
+            throw new AssertionError("Unreachable code!");
         }
 
         public  void delimitedStringConstant(Token result) {
@@ -1635,25 +1628,18 @@ public class lexer {
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
                                     if ((isalpha((this.p.get(1) & 0xFF))) != 0 || (this.p.get(1) & 0xFF) == 95 || ((this.p.get(1) & 0xFF) & 128) != 0)
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 105:
                                 case 102:
                                 case 70:
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 95:
                                     this.p.plusAssign(1);
                                     base = 8;
                                     break;
                                 case 76:
-                                    if ((this.p.get(1) & 0xFF) == 105) {
-                                        /*goto Lreal*/
-                                        this.p = pcopy(start);
-                                        return this.inreal(t);
-                                    }
+                                    if ((this.p.get(1) & 0xFF) == 105)
+                                        /*goto Lreal*/throw Dispatch.INSTANCE;
                                     break;
                                 default:
                                 break;
