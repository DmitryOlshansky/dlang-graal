diff --git a/src/main/java/org/dlang/dmd/astbase.java b/src/main/java/org/dlang/dmd/astbase.java
index 34041a9..4156957 100644
--- a/src/main/java/org/dlang/dmd/astbase.java
+++ b/src/main/java/org/dlang/dmd/astbase.java
@@ -1977,7 +1977,10 @@ public class astbase {
             public DArray<BaseClass> baseclasses;
             public int baseok;
             public  ClassDeclaration(Loc loc, Identifier id, DArray<BaseClass> baseclasses, DArray<Dsymbol> members, boolean inObject) {
-                super(loc, id == null ? Identifier.generateId(new BytePtr("__anonclass")) : id);
+                if (!(id != null))
+                    id = Identifier.generateId(new BytePtr("__anonclass"));
+                assert(id != null);
+                super(loc, id);
                 if (baseclasses != null)
                 {
                     this.baseclasses = baseclasses;
@@ -4311,7 +4314,7 @@ public class astbase {
                 this.arguments = arguments;
             }
 
-            public  TypeTuple(DArray<Expression> exps, int tag) {
+            public  TypeTuple(DArray<Expression> exps) {
                 super((byte)37);
                 DArray<Parameter> arguments = new DArray<Parameter>();
                 if (exps != null)
@@ -5911,7 +5914,9 @@ public class astbase {
         public static class VarExp extends SymbolExp
         {
             public  VarExp(Loc loc, Declaration var, boolean hasOverloads) {
-                super(loc, TOK.variable, 29, var, var.isVarDeclaration() == null && hasOverloads);
+                if (var.isVarDeclaration() != null)
+                    hasOverloads = false;
+                super(loc, TOK.variable, 29, var, hasOverloads);
                 this.type = var.type;
             }
 
@@ -7451,6 +7456,14 @@ public class astbase {
             public ForeachStatement aggrfe;
             public ForeachRangeStatement rangefe;
             public  StaticForeach(Loc loc, ForeachStatement aggrfe, ForeachRangeStatement rangefe) {
+                {
+                    assert(!(!(aggrfe != null)) ^ !(!(rangefe != null)));
+                }
+                {
+                    {
+                        assert(!(!(aggrfe != null)) ^ !(!(rangefe != null)));
+                    }
+                }
                 super();
                 this.loc = loc.copy();
                 this.aggrfe = aggrfe;
@@ -7892,9 +7905,8 @@ public class astbase {
             boolean result = false;
             if ((stc & 17592186568704L) == 17592186568704L)
                 stc &= -524289L;
-            Ref<Long> stc_ref = ref(stc);
             for (; (stc) != 0;){
-                BytePtr p = pcopy(ASTBase.stcToChars(stc_ref));
+                BytePtr p = pcopy(ASTBase.stcToChars(stc));
                 if (p == null)
                     break;
                 if (!(result))
diff --git a/src/main/java/org/dlang/dmd/globals.java b/src/main/java/org/dlang/dmd/globals.java
index 211e7df..1fda47d 100644
--- a/src/main/java/org/dlang/dmd/globals.java
+++ b/src/main/java/org/dlang/dmd/globals.java
@@ -257,7 +257,22 @@ public class globals {
         public ByteSlice exefile;
         public ByteSlice mapfile;
         public  boolean isPOSIX() {
-            return this.isLinux || this.isOSX || this.isFreeBSD || this.isOpenBSD || this.isDragonFlyBSD || this.isSolaris;
+            {
+                assert(result || this.isWindows);
+            }
+            try {
+                __result = this.isLinux || this.isOSX || this.isFreeBSD || this.isOpenBSD || this.isDragonFlyBSD || this.isSolaris;
+                /*goto __returnLabel*/throw Dispatch0.INSTANCE;
+            }
+            catch(Dispatch0 __d){}
+        /*__returnLabel:*/
+            {
+                boolean result = __result;
+                {
+                    assert(result || this.isWindows);
+                }
+            }
+            return __result;
         }
 
         public Param(){
diff --git a/src/main/java/org/dlang/dmd/identifier.java b/src/main/java/org/dlang/dmd/identifier.java
index e80faa0..3911eb6 100644
--- a/src/main/java/org/dlang/dmd/identifier.java
+++ b/src/main/java/org/dlang/dmd/identifier.java
@@ -142,6 +142,11 @@ public class identifier {
 
         public static Identifier generateIdWithLoc(ByteSlice prefix, Loc loc) {
             OutBuffer idBuf = new OutBuffer();
+            Function0<Integer> __lambda7 = new Function0<Integer>(){
+                public Integer invoke(){
+                    return 1;
+                }
+            };
             Function1<Integer,Integer> __lambda8 = new Function1<Integer,Integer>(){
                 public Integer invoke(Integer counter){
                     idBuf.writestring( new ByteSlice("_"));
@@ -149,11 +154,6 @@ public class identifier {
                     return counter + 1;
                 }
             };
-            Function0<Integer> __lambda7 = new Function0<Integer>(){
-                public Integer invoke(){
-                    return 1;
-                }
-            };
             try {
                 idBuf.writestring(prefix);
                 idBuf.writestring( new ByteSlice("_L"));
@@ -173,11 +173,11 @@ public class identifier {
 
         public static Identifier idPool(ByteSlice s) {
             StringValue sv = Identifier.stringtable.update(s);
-            Identifier id = (Identifier)(sv).ptrvalue;
+            Identifier id = null;
             if (!(id != null))
             {
-                id = new Identifier(s.copy(), 120);
-                (sv).ptrvalue = pcopy((id));
+                id = new Identifier((sv).asString(), 120);
+                (sv).ptrvalue = pcopy((toBytePtr(id)));
             }
             return id;
         }
@@ -189,8 +189,8 @@ public class identifier {
         public static Identifier idPool(ByteSlice s, int value) {
             StringValue sv = Identifier.stringtable.insert(s, null);
             assert(sv != null);
-            Identifier id = new Identifier(s.copy(), value);
-            (sv).ptrvalue = pcopy((id));
+            Identifier id = new Identifier((sv).asString(), value);
+            (sv).ptrvalue = pcopy((toBytePtr(id)));
             return id;
         }
 
diff --git a/src/main/java/org/dlang/dmd/lexer.java b/src/main/java/org/dlang/dmd/lexer.java
index 728d011..8a517f6 100644
--- a/src/main/java/org/dlang/dmd/lexer.java
+++ b/src/main/java/org/dlang/dmd/lexer.java
@@ -382,26 +382,17 @@ public class lexer {
                                         if (id.equals(Id.DATE))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scandate));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIME))
                                         {
                                             (t).ustring = pcopy(ptr(lexer.scantime));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.VENDOR))
                                         {
                                             (t).ustring = pcopy((toBytePtr(xarraydup(global.vendor))));
-                                            /*goto Lstr*/
-                                            (t).value = TOK.string_;
-                                            (t).postfix = (byte)0;
-                                            (t).len = strlen((t).ustring);
+                                            /*goto Lstr*/throw Dispatch.INSTANCE;
                                         }
                                         else if (id.equals(Id.TIMESTAMP))
                                         {
@@ -993,10 +984,10 @@ public class lexer {
         }
 
         public  int escapeSequence() {
-            return escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
+            return Lexer.escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
         }
 
-        public int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr sequence) {
+        public static int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr sequence) {
             {
                 assert(handler != null);
             }
@@ -1005,7 +996,7 @@ public class lexer {
                     assert(handler != null);
                 }
             }
-            p = pcopy(sequence);
+            BytePtr p = pcopy(sequence);
             try {
                 int c = (p.get() & 0xFF);
                 int ndigits = 0;
@@ -1153,6 +1144,7 @@ public class lexer {
                 return c;
             }
             finally {
+                sequence = pcopy(p);
             }
         }
 
@@ -1283,6 +1275,7 @@ public class lexer {
                     } while(__dispatch10 != 0);
                 }
             }
+            throw new AssertionError("Unreachable code!");
         }
 
         public  void delimitedStringConstant(Token result) {
@@ -1681,25 +1674,18 @@ public class lexer {
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
                                     if ((isalpha((this.p.get(1) & 0xFF))) != 0 || (this.p.get(1) & 0xFF) == 95 || ((this.p.get(1) & 0xFF) & 128) != 0)
                                         /*goto Ldone*/throw Dispatch0.INSTANCE;
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 105:
                                 case 102:
                                 case 70:
-                                    /*goto Lreal*/
-                                    this.p = pcopy(start);
-                                    return this.inreal(t);
+                                    /*goto Lreal*/throw Dispatch.INSTANCE;
                                 case 95:
                                     this.p.plusAssign(1);
                                     base = 8;
                                     break;
                                 case 76:
-                                    if ((this.p.get(1) & 0xFF) == 105) {
-                                        /*goto Lreal*/
-                                        this.p = pcopy(start);
-                                        return this.inreal(t);
-                                    }
+                                    if ((this.p.get(1) & 0xFF) == 105)
+                                        /*goto Lreal*/throw Dispatch.INSTANCE;
                                     break;
                                 default:
                                 {
@@ -2328,6 +2314,7 @@ public class lexer {
                                         continue L_outer8;
                                     /*goto Lnewline*/{ __dispatch26 = -1; continue dispatched_26; }
                                 default:
+                                {
                                     if ((c & 0xFF) == 226)
                                     {
                                         if ((q.get(1) & 0xFF) == 128 && (q.get(2) & 0xFF) == 168 || (q.get(2) & 0xFF) == 169)
@@ -2342,6 +2329,7 @@ public class lexer {
                                 case -1:
                                 __dispatch26 = 0;
                                     c = (byte)10;
+                                }
                                 case 10:
                                     linestart = 1;
                                     trimTrailingWhitespace.invoke();
