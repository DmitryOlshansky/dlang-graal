diff --git a/src/main/java/org/dlang/dmd/lexer.java b/src/main/java/org/dlang/dmd/lexer.java
index 61cd601..e86b0fe 100644
--- a/src/main/java/org/dlang/dmd/lexer.java
+++ b/src/main/java/org/dlang/dmd/lexer.java
@@ -411,17 +411,26 @@ public class lexer {
                                     if (id.equals(Id.DATE))
                                     {
                                         (t).ustring = ptr(lexer.scandate);
-                                        /*goto Lstr*/throw Dispatch.INSTANCE;
+                                        /*goto Lstr*/
+                                        (t).value = TOK.string_;
+                                        (t).postfix = (byte)0;
+                                        (t).len = strlen((t).ustring);
                                     }
                                     else if (id.equals(Id.TIME))
                                     {
                                         (t).ustring = ptr(lexer.scantime);
-                                        /*goto Lstr*/throw Dispatch.INSTANCE;
+                                        /*goto Lstr*/
+                                        (t).value = TOK.string_;
+                                        (t).postfix = (byte)0;
+                                        (t).len = strlen((t).ustring);
                                     }
                                     else if (id.equals(Id.VENDOR))
                                     {
                                         (t).ustring = xarraydup(global.vendor).toBytePtr();
-                                        /*goto Lstr*/throw Dispatch.INSTANCE;
+                                        /*goto Lstr*/
+                                        (t).value = TOK.string_;
+                                        (t).postfix = (byte)0;
+                                        (t).len = strlen((t).ustring);
                                     }
                                     else if (id.equals(Id.TIMESTAMP))
                                     {
@@ -1012,19 +1021,10 @@ public class lexer {
         }
 
         public  int escapeSequence() {
-            return Lexer.escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
+            return escapeSequence(this.token.loc, this.diagnosticReporter, this.p);
         }
 
-        public static int escapeSequence(Loc loc, DiagnosticReporter handler, Ref<BytePtr> sequence) {
-            {
-                assert(handler != null);
-            }
-            {
-                {
-                    assert(handler != null);
-                }
-            }
-            BytePtr p = sequence.value;
+        public int escapeSequence(Loc loc, DiagnosticReporter handler, BytePtr q) {
             try {
                 int c = (int)p.get(0);
                 int ndigits = 0;
@@ -1104,7 +1104,7 @@ public class lexer {
                             }
                             else
                             {
-                                handler.error(loc, new BytePtr("undefined escape hex sequence \\%c%c"), sequence.value.get(0), c);
+                                handler.error(loc, new BytePtr("undefined escape hex sequence \\%c%c"), q.get(0), c);
                                 p.postInc();
                             }
                             break;
@@ -1168,7 +1168,6 @@ public class lexer {
                 return c;
             }
             finally {
-                sequence.value = p;
             }
         }
 
@@ -1296,7 +1295,6 @@ public class lexer {
                     }
                 } while(false);
             }
-            throw new AssertionError("Unreachable code!");
         }
 
         public  void delimitedStringConstant(Token result) {
@@ -2267,6 +2265,7 @@ public class lexer {
                             len -= 1;
                         }
                         buf.setsize(len);
+                        return null;
                     }
                 };
                 for (; q.lessThan(qend);q.postInc()){
@@ -2293,7 +2292,7 @@ public class lexer {
                                     continue;
                                 /*goto Lnewline*/{ __dispatch1 = -1; continue dispatched_1; }
                             default:
-                            {
+
                                 if (c == (byte)226)
                                 {
                                     if (q.get(1) == (byte)128 && q.get(2) == (byte)168 || q.get(2) == (byte)169)
@@ -2307,7 +2306,7 @@ public class lexer {
                             /*Lnewline:*/
                             case -1:
                                 c = (byte)10;
-                            }
+
                             case (byte)10:
                                 linestart = 1;
                                 trimTrailingWhitespace.invoke();
@@ -2320,11 +2319,18 @@ public class lexer {
                 ByteSlice s = buf.peekSlice();
                 if (s.getLength() == 0 || s.get(s.getLength() - (byte)1) != (byte)10)
                     buf.writeByte(10);
-                Ptr<BytePtr> dc = (lineComment) != 0 && this.anyToken ? ptr((t).lineComment) : ptr((t).blockComment);
-                if (dc.get(0) != null)
-                    dc.set(0, Lexer.combineComments(dc.get(0), buf.peekChars(), newParagraph));
-                else
-                    dc.set(0, buf.extractChars());
+                if ((lineComment) != 0 && this.anyToken) {
+                    if(t.lineComment != null)
+                        t.lineComment = Lexer.combineComments(t.lineComment, buf.peekChars(), newParagraph);
+                    else
+                        t.lineComment = buf.extractChars();
+                }
+                else {
+                    if(t.blockComment != null)
+                        t.blockComment = Lexer.combineComments(t.blockComment, buf.peekChars(), newParagraph);
+                    else
+                        t.blockComment = buf.extractChars();
+                }
             }
             finally {
             }
@@ -2365,7 +2371,7 @@ public class lexer {
             this.line = this.p;
         }
 
-    }
+    }/*
     public static void test_2() {
         test( new ByteSlice("'"), (byte)39);
         test( new ByteSlice("\""), (byte)34);
@@ -2429,5 +2435,5 @@ public class lexer {
         test( new ByteSlice("&BAD;"),  new ByteSlice("unnamed character entity &BAD;"), '\u003f', 5);
         test( new ByteSlice("&quot"),  new ByteSlice("unterminated named entity &quot;"), '\u003f', 5);
         test( new ByteSlice("400"),  new ByteSlice("escape octal sequence \\400 is larger than \\377"), '\u0100', 3);
-    }
+    }*/
 }
