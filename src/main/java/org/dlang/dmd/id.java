package org.dlang.dmd;

import kotlin.jvm.functions.*;

import org.dlang.dmd.root.*;

import static org.dlang.dmd.root.filename.*;

import static org.dlang.dmd.root.File.*;

import static org.dlang.dmd.root.ShimsKt.*;
import static org.dlang.dmd.root.SliceKt.*;
import static org.dlang.dmd.root.DArrayKt.*;
import static org.dlang.dmd.identifier.*;
import static org.dlang.dmd.tokens.*;

public class id {
    private static final Msgtable[] initializer_0 = {new Msgtable( new ByteSlice("IUnknown"), new ByteSlice()), new Msgtable( new ByteSlice("Object"), new ByteSlice()), new Msgtable( new ByteSlice("object"), new ByteSlice()), new Msgtable( new ByteSlice("string"), new ByteSlice()), new Msgtable( new ByteSlice("wstring"), new ByteSlice()), new Msgtable( new ByteSlice("dstring"), new ByteSlice()), new Msgtable( new ByteSlice("max"), new ByteSlice()), new Msgtable( new ByteSlice("min"), new ByteSlice()), new Msgtable( new ByteSlice("This"),  new ByteSlice("this")), new Msgtable( new ByteSlice("_super"),  new ByteSlice("super")), new Msgtable( new ByteSlice("ctor"),  new ByteSlice("__ctor")), new Msgtable( new ByteSlice("dtor"),  new ByteSlice("__dtor")), new Msgtable( new ByteSlice("__xdtor"),  new ByteSlice("__xdtor")), new Msgtable( new ByteSlice("__fieldDtor"),  new ByteSlice("__fieldDtor")), new Msgtable( new ByteSlice("__aggrDtor"),  new ByteSlice("__aggrDtor")), new Msgtable( new ByteSlice("cppdtor"),  new ByteSlice("__cppdtor")), new Msgtable( new ByteSlice("ticppdtor"),  new ByteSlice("__ticppdtor")), new Msgtable( new ByteSlice("postblit"),  new ByteSlice("__postblit")), new Msgtable( new ByteSlice("__xpostblit"),  new ByteSlice("__xpostblit")), new Msgtable( new ByteSlice("__fieldPostblit"),  new ByteSlice("__fieldPostblit")), new Msgtable( new ByteSlice("__aggrPostblit"),  new ByteSlice("__aggrPostblit")), new Msgtable( new ByteSlice("classInvariant"),  new ByteSlice("__invariant")), new Msgtable( new ByteSlice("unitTest"),  new ByteSlice("__unitTest")), new Msgtable( new ByteSlice("require"),  new ByteSlice("__require")), new Msgtable( new ByteSlice("ensure"),  new ByteSlice("__ensure")), new Msgtable( new ByteSlice("capture"),  new ByteSlice("__capture")), new Msgtable( new ByteSlice("this2"),  new ByteSlice("__this")), new Msgtable( new ByteSlice("_init"),  new ByteSlice("init")), new Msgtable( new ByteSlice("__sizeof"),  new ByteSlice("sizeof")), new Msgtable( new ByteSlice("__xalignof"),  new ByteSlice("alignof")), new Msgtable( new ByteSlice("_mangleof"),  new ByteSlice("mangleof")), new Msgtable( new ByteSlice("stringof"), new ByteSlice()), new Msgtable( new ByteSlice("_tupleof"),  new ByteSlice("tupleof")), new Msgtable( new ByteSlice("length"), new ByteSlice()), new Msgtable( new ByteSlice("remove"), new ByteSlice()), new Msgtable( new ByteSlice("ptr"), new ByteSlice()), new Msgtable( new ByteSlice("array"), new ByteSlice()), new Msgtable( new ByteSlice("funcptr"), new ByteSlice()), new Msgtable( new ByteSlice("dollar"),  new ByteSlice("__dollar")), new Msgtable( new ByteSlice("ctfe"),  new ByteSlice("__ctfe")), new Msgtable( new ByteSlice("offset"), new ByteSlice()), new Msgtable( new ByteSlice("offsetof"), new ByteSlice()), new Msgtable( new ByteSlice("ModuleInfo"), new ByteSlice()), new Msgtable( new ByteSlice("ClassInfo"), new ByteSlice()), new Msgtable( new ByteSlice("classinfo"), new ByteSlice()), new Msgtable( new ByteSlice("typeinfo"), new ByteSlice()), new Msgtable( new ByteSlice("outer"), new ByteSlice()), new Msgtable( new ByteSlice("Exception"), new ByteSlice()), new Msgtable( new ByteSlice("RTInfo"), new ByteSlice()), new Msgtable( new ByteSlice("Throwable"), new ByteSlice()), new Msgtable( new ByteSlice("Error"), new ByteSlice()), new Msgtable( new ByteSlice("withSym"),  new ByteSlice("__withSym")), new Msgtable( new ByteSlice("result"),  new ByteSlice("__result")), new Msgtable( new ByteSlice("returnLabel"),  new ByteSlice("__returnLabel")), new Msgtable( new ByteSlice("line"), new ByteSlice()), new Msgtable( new ByteSlice("empty"),  new ByteSlice("")), new Msgtable( new ByteSlice("p"), new ByteSlice()), new Msgtable( new ByteSlice("q"), new ByteSlice()), new Msgtable( new ByteSlice("__vptr"), new ByteSlice()), new Msgtable( new ByteSlice("__monitor"), new ByteSlice()), new Msgtable( new ByteSlice("gate"),  new ByteSlice("__gate")), new Msgtable( new ByteSlice("__c_long"), new ByteSlice()), new Msgtable( new ByteSlice("__c_ulong"), new ByteSlice()), new Msgtable( new ByteSlice("__c_longlong"), new ByteSlice()), new Msgtable( new ByteSlice("__c_ulonglong"), new ByteSlice()), new Msgtable( new ByteSlice("__c_long_double"), new ByteSlice()), new Msgtable( new ByteSlice("__c_wchar_t"), new ByteSlice()), new Msgtable( new ByteSlice("cpp_type_info_ptr"),  new ByteSlice("__cpp_type_info_ptr")), new Msgtable( new ByteSlice("_assert"),  new ByteSlice("assert")), new Msgtable( new ByteSlice("_unittest"),  new ByteSlice("unittest")), new Msgtable( new ByteSlice("_body"),  new ByteSlice("body")), new Msgtable( new ByteSlice("TypeInfo"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Class"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Interface"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Struct"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Enum"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Pointer"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Vector"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Array"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_StaticArray"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_AssociativeArray"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Function"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Delegate"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Tuple"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Const"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Invariant"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Shared"), new ByteSlice()), new Msgtable( new ByteSlice("TypeInfo_Wild"),  new ByteSlice("TypeInfo_Inout")), new Msgtable( new ByteSlice("elements"), new ByteSlice()), new Msgtable( new ByteSlice("_arguments_typeinfo"), new ByteSlice()), new Msgtable( new ByteSlice("_arguments"), new ByteSlice()), new Msgtable( new ByteSlice("_argptr"), new ByteSlice()), new Msgtable( new ByteSlice("destroy"), new ByteSlice()), new Msgtable( new ByteSlice("xopEquals"),  new ByteSlice("__xopEquals")), new Msgtable( new ByteSlice("xopCmp"),  new ByteSlice("__xopCmp")), new Msgtable( new ByteSlice("xtoHash"),  new ByteSlice("__xtoHash")), new Msgtable( new ByteSlice("LINE"),  new ByteSlice("__LINE__")), new Msgtable( new ByteSlice("FILE"),  new ByteSlice("__FILE__")), new Msgtable( new ByteSlice("MODULE"),  new ByteSlice("__MODULE__")), new Msgtable( new ByteSlice("FUNCTION"),  new ByteSlice("__FUNCTION__")), new Msgtable( new ByteSlice("PRETTY_FUNCTION"),  new ByteSlice("__PRETTY_FUNCTION__")), new Msgtable( new ByteSlice("DATE"),  new ByteSlice("__DATE__")), new Msgtable( new ByteSlice("TIME"),  new ByteSlice("__TIME__")), new Msgtable( new ByteSlice("TIMESTAMP"),  new ByteSlice("__TIMESTAMP__")), new Msgtable( new ByteSlice("VENDOR"),  new ByteSlice("__VENDOR__")), new Msgtable( new ByteSlice("VERSIONX"),  new ByteSlice("__VERSION__")), new Msgtable( new ByteSlice("EOFX"),  new ByteSlice("__EOF__")), new Msgtable( new ByteSlice("nan"), new ByteSlice()), new Msgtable( new ByteSlice("infinity"), new ByteSlice()), new Msgtable( new ByteSlice("dig"), new ByteSlice()), new Msgtable( new ByteSlice("epsilon"), new ByteSlice()), new Msgtable( new ByteSlice("mant_dig"), new ByteSlice()), new Msgtable( new ByteSlice("max_10_exp"), new ByteSlice()), new Msgtable( new ByteSlice("max_exp"), new ByteSlice()), new Msgtable( new ByteSlice("min_10_exp"), new ByteSlice()), new Msgtable( new ByteSlice("min_exp"), new ByteSlice()), new Msgtable( new ByteSlice("min_normal"), new ByteSlice()), new Msgtable( new ByteSlice("re"), new ByteSlice()), new Msgtable( new ByteSlice("im"), new ByteSlice()), new Msgtable( new ByteSlice("C"), new ByteSlice()), new Msgtable( new ByteSlice("D"), new ByteSlice()), new Msgtable( new ByteSlice("Windows"), new ByteSlice()), new Msgtable( new ByteSlice("Pascal"), new ByteSlice()), new Msgtable( new ByteSlice("System"), new ByteSlice()), new Msgtable( new ByteSlice("Objective"), new ByteSlice()), new Msgtable( new ByteSlice("exit"), new ByteSlice()), new Msgtable( new ByteSlice("success"), new ByteSlice()), new Msgtable( new ByteSlice("failure"), new ByteSlice()), new Msgtable( new ByteSlice("keys"), new ByteSlice()), new Msgtable( new ByteSlice("values"), new ByteSlice()), new Msgtable( new ByteSlice("rehash"), new ByteSlice()), new Msgtable( new ByteSlice("future"),  new ByteSlice("__future")), new Msgtable( new ByteSlice("property"), new ByteSlice()), new Msgtable( new ByteSlice("nogc"), new ByteSlice()), new Msgtable( new ByteSlice("safe"), new ByteSlice()), new Msgtable( new ByteSlice("trusted"), new ByteSlice()), new Msgtable( new ByteSlice("system"), new ByteSlice()), new Msgtable( new ByteSlice("disable"), new ByteSlice()), new Msgtable( new ByteSlice("___out"),  new ByteSlice("out")), new Msgtable( new ByteSlice("___in"),  new ByteSlice("in")), new Msgtable( new ByteSlice("__int"),  new ByteSlice("int")), new Msgtable( new ByteSlice("_dollar"),  new ByteSlice("$")), new Msgtable( new ByteSlice("__LOCAL_SIZE"), new ByteSlice()), new Msgtable( new ByteSlice("uadd"),  new ByteSlice("opPos")), new Msgtable( new ByteSlice("neg"),  new ByteSlice("opNeg")), new Msgtable( new ByteSlice("com"),  new ByteSlice("opCom")), new Msgtable( new ByteSlice("add"),  new ByteSlice("opAdd")), new Msgtable( new ByteSlice("add_r"),  new ByteSlice("opAdd_r")), new Msgtable( new ByteSlice("sub"),  new ByteSlice("opSub")), new Msgtable( new ByteSlice("sub_r"),  new ByteSlice("opSub_r")), new Msgtable( new ByteSlice("mul"),  new ByteSlice("opMul")), new Msgtable( new ByteSlice("mul_r"),  new ByteSlice("opMul_r")), new Msgtable( new ByteSlice("div"),  new ByteSlice("opDiv")), new Msgtable( new ByteSlice("div_r"),  new ByteSlice("opDiv_r")), new Msgtable( new ByteSlice("mod"),  new ByteSlice("opMod")), new Msgtable( new ByteSlice("mod_r"),  new ByteSlice("opMod_r")), new Msgtable( new ByteSlice("eq"),  new ByteSlice("opEquals")), new Msgtable( new ByteSlice("cmp"),  new ByteSlice("opCmp")), new Msgtable( new ByteSlice("iand"),  new ByteSlice("opAnd")), new Msgtable( new ByteSlice("iand_r"),  new ByteSlice("opAnd_r")), new Msgtable( new ByteSlice("ior"),  new ByteSlice("opOr")), new Msgtable( new ByteSlice("ior_r"),  new ByteSlice("opOr_r")), new Msgtable( new ByteSlice("ixor"),  new ByteSlice("opXor")), new Msgtable( new ByteSlice("ixor_r"),  new ByteSlice("opXor_r")), new Msgtable( new ByteSlice("shl"),  new ByteSlice("opShl")), new Msgtable( new ByteSlice("shl_r"),  new ByteSlice("opShl_r")), new Msgtable( new ByteSlice("shr"),  new ByteSlice("opShr")), new Msgtable( new ByteSlice("shr_r"),  new ByteSlice("opShr_r")), new Msgtable( new ByteSlice("ushr"),  new ByteSlice("opUShr")), new Msgtable( new ByteSlice("ushr_r"),  new ByteSlice("opUShr_r")), new Msgtable( new ByteSlice("cat"),  new ByteSlice("opCat")), new Msgtable( new ByteSlice("cat_r"),  new ByteSlice("opCat_r")), new Msgtable( new ByteSlice("assign"),  new ByteSlice("opAssign")), new Msgtable( new ByteSlice("addass"),  new ByteSlice("opAddAssign")), new Msgtable( new ByteSlice("subass"),  new ByteSlice("opSubAssign")), new Msgtable( new ByteSlice("mulass"),  new ByteSlice("opMulAssign")), new Msgtable( new ByteSlice("divass"),  new ByteSlice("opDivAssign")), new Msgtable( new ByteSlice("modass"),  new ByteSlice("opModAssign")), new Msgtable( new ByteSlice("andass"),  new ByteSlice("opAndAssign")), new Msgtable( new ByteSlice("orass"),  new ByteSlice("opOrAssign")), new Msgtable( new ByteSlice("xorass"),  new ByteSlice("opXorAssign")), new Msgtable( new ByteSlice("shlass"),  new ByteSlice("opShlAssign")), new Msgtable( new ByteSlice("shrass"),  new ByteSlice("opShrAssign")), new Msgtable( new ByteSlice("ushrass"),  new ByteSlice("opUShrAssign")), new Msgtable( new ByteSlice("catass"),  new ByteSlice("opCatAssign")), new Msgtable( new ByteSlice("postinc"),  new ByteSlice("opPostInc")), new Msgtable( new ByteSlice("postdec"),  new ByteSlice("opPostDec")), new Msgtable( new ByteSlice("index"),  new ByteSlice("opIndex")), new Msgtable( new ByteSlice("indexass"),  new ByteSlice("opIndexAssign")), new Msgtable( new ByteSlice("slice"),  new ByteSlice("opSlice")), new Msgtable( new ByteSlice("sliceass"),  new ByteSlice("opSliceAssign")), new Msgtable( new ByteSlice("call"),  new ByteSlice("opCall")), new Msgtable( new ByteSlice("_cast"),  new ByteSlice("opCast")), new Msgtable( new ByteSlice("opIn"), new ByteSlice()), new Msgtable( new ByteSlice("opIn_r"), new ByteSlice()), new Msgtable( new ByteSlice("opStar"), new ByteSlice()), new Msgtable( new ByteSlice("opDot"), new ByteSlice()), new Msgtable( new ByteSlice("opDispatch"), new ByteSlice()), new Msgtable( new ByteSlice("opDollar"), new ByteSlice()), new Msgtable( new ByteSlice("opUnary"), new ByteSlice()), new Msgtable( new ByteSlice("opIndexUnary"), new ByteSlice()), new Msgtable( new ByteSlice("opSliceUnary"), new ByteSlice()), new Msgtable( new ByteSlice("opBinary"), new ByteSlice()), new Msgtable( new ByteSlice("opBinaryRight"), new ByteSlice()), new Msgtable( new ByteSlice("opOpAssign"), new ByteSlice()), new Msgtable( new ByteSlice("opIndexOpAssign"), new ByteSlice()), new Msgtable( new ByteSlice("opSliceOpAssign"), new ByteSlice()), new Msgtable( new ByteSlice("pow"),  new ByteSlice("opPow")), new Msgtable( new ByteSlice("pow_r"),  new ByteSlice("opPow_r")), new Msgtable( new ByteSlice("powass"),  new ByteSlice("opPowAssign")), new Msgtable( new ByteSlice("classNew"),  new ByteSlice("new")), new Msgtable( new ByteSlice("classDelete"),  new ByteSlice("delete")), new Msgtable( new ByteSlice("apply"),  new ByteSlice("opApply")), new Msgtable( new ByteSlice("applyReverse"),  new ByteSlice("opApplyReverse")), new Msgtable( new ByteSlice("Fempty"),  new ByteSlice("empty")), new Msgtable( new ByteSlice("Ffront"),  new ByteSlice("front")), new Msgtable( new ByteSlice("Fback"),  new ByteSlice("back")), new Msgtable( new ByteSlice("FpopFront"),  new ByteSlice("popFront")), new Msgtable( new ByteSlice("FpopBack"),  new ByteSlice("popBack")), new Msgtable( new ByteSlice("aaLen"),  new ByteSlice("_aaLen")), new Msgtable( new ByteSlice("aaKeys"),  new ByteSlice("_aaKeys")), new Msgtable( new ByteSlice("aaValues"),  new ByteSlice("_aaValues")), new Msgtable( new ByteSlice("aaRehash"),  new ByteSlice("_aaRehash")), new Msgtable( new ByteSlice("monitorenter"),  new ByteSlice("_d_monitorenter")), new Msgtable( new ByteSlice("monitorexit"),  new ByteSlice("_d_monitorexit")), new Msgtable( new ByteSlice("criticalenter"),  new ByteSlice("_d_criticalenter")), new Msgtable( new ByteSlice("criticalexit"),  new ByteSlice("_d_criticalexit")), new Msgtable( new ByteSlice("__ArrayEq"), new ByteSlice()), new Msgtable( new ByteSlice("__ArrayPostblit"), new ByteSlice()), new Msgtable( new ByteSlice("__ArrayDtor"), new ByteSlice()), new Msgtable( new ByteSlice("_d_delThrowable"), new ByteSlice()), new Msgtable( new ByteSlice("_d_assert_fail"), new ByteSlice()), new Msgtable( new ByteSlice("dup"), new ByteSlice()), new Msgtable( new ByteSlice("_aaApply"), new ByteSlice()), new Msgtable( new ByteSlice("_aaApply2"), new ByteSlice()), new Msgtable( new ByteSlice("Pinline"),  new ByteSlice("inline")), new Msgtable( new ByteSlice("lib"), new ByteSlice()), new Msgtable( new ByteSlice("linkerDirective"), new ByteSlice()), new Msgtable( new ByteSlice("mangle"), new ByteSlice()), new Msgtable( new ByteSlice("msg"), new ByteSlice()), new Msgtable( new ByteSlice("startaddress"), new ByteSlice()), new Msgtable( new ByteSlice("crt_constructor"), new ByteSlice()), new Msgtable( new ByteSlice("crt_destructor"), new ByteSlice()), new Msgtable( new ByteSlice("tohash"),  new ByteSlice("toHash")), new Msgtable( new ByteSlice("tostring"),  new ByteSlice("toString")), new Msgtable( new ByteSlice("getmembers"),  new ByteSlice("getMembers")), new Msgtable( new ByteSlice("__alloca"),  new ByteSlice("alloca")), new Msgtable( new ByteSlice("main"), new ByteSlice()), new Msgtable( new ByteSlice("WinMain"), new ByteSlice()), new Msgtable( new ByteSlice("DllMain"), new ByteSlice()), new Msgtable( new ByteSlice("tls_get_addr"),  new ByteSlice("___tls_get_addr")), new Msgtable( new ByteSlice("entrypoint"),  new ByteSlice("__entrypoint")), new Msgtable( new ByteSlice("rt_init"), new ByteSlice()), new Msgtable( new ByteSlice("__cmp"), new ByteSlice()), new Msgtable( new ByteSlice("__equals"), new ByteSlice()), new Msgtable( new ByteSlice("__switch"), new ByteSlice()), new Msgtable( new ByteSlice("__switch_error"), new ByteSlice()), new Msgtable( new ByteSlice("__ArrayCast"), new ByteSlice()), new Msgtable( new ByteSlice("va_start"), new ByteSlice()), new Msgtable( new ByteSlice("std"), new ByteSlice()), new Msgtable( new ByteSlice("core"), new ByteSlice()), new Msgtable( new ByteSlice("etc"), new ByteSlice()), new Msgtable( new ByteSlice("attribute"), new ByteSlice()), new Msgtable( new ByteSlice("math"), new ByteSlice()), new Msgtable( new ByteSlice("sin"), new ByteSlice()), new Msgtable( new ByteSlice("cos"), new ByteSlice()), new Msgtable( new ByteSlice("tan"), new ByteSlice()), new Msgtable( new ByteSlice("_sqrt"),  new ByteSlice("sqrt")), new Msgtable( new ByteSlice("_pow"),  new ByteSlice("pow")), new Msgtable( new ByteSlice("atan2"), new ByteSlice()), new Msgtable( new ByteSlice("rndtol"), new ByteSlice()), new Msgtable( new ByteSlice("expm1"), new ByteSlice()), new Msgtable( new ByteSlice("exp2"), new ByteSlice()), new Msgtable( new ByteSlice("yl2x"), new ByteSlice()), new Msgtable( new ByteSlice("yl2xp1"), new ByteSlice()), new Msgtable( new ByteSlice("fabs"), new ByteSlice()), new Msgtable( new ByteSlice("bitop"), new ByteSlice()), new Msgtable( new ByteSlice("bsf"), new ByteSlice()), new Msgtable( new ByteSlice("bsr"), new ByteSlice()), new Msgtable( new ByteSlice("bswap"), new ByteSlice()), new Msgtable( new ByteSlice("isAbstractClass"), new ByteSlice()), new Msgtable( new ByteSlice("isArithmetic"), new ByteSlice()), new Msgtable( new ByteSlice("isAssociativeArray"), new ByteSlice()), new Msgtable( new ByteSlice("isFinalClass"), new ByteSlice()), new Msgtable( new ByteSlice("isTemplate"), new ByteSlice()), new Msgtable( new ByteSlice("isPOD"), new ByteSlice()), new Msgtable( new ByteSlice("isDeprecated"), new ByteSlice()), new Msgtable( new ByteSlice("isDisabled"), new ByteSlice()), new Msgtable( new ByteSlice("isFuture"), new ByteSlice()), new Msgtable( new ByteSlice("isNested"), new ByteSlice()), new Msgtable( new ByteSlice("isFloating"), new ByteSlice()), new Msgtable( new ByteSlice("isIntegral"), new ByteSlice()), new Msgtable( new ByteSlice("isScalar"), new ByteSlice()), new Msgtable( new ByteSlice("isStaticArray"), new ByteSlice()), new Msgtable( new ByteSlice("isUnsigned"), new ByteSlice()), new Msgtable( new ByteSlice("isVirtualFunction"), new ByteSlice()), new Msgtable( new ByteSlice("isVirtualMethod"), new ByteSlice()), new Msgtable( new ByteSlice("isAbstractFunction"), new ByteSlice()), new Msgtable( new ByteSlice("isFinalFunction"), new ByteSlice()), new Msgtable( new ByteSlice("isOverrideFunction"), new ByteSlice()), new Msgtable( new ByteSlice("isStaticFunction"), new ByteSlice()), new Msgtable( new ByteSlice("isModule"), new ByteSlice()), new Msgtable( new ByteSlice("isPackage"), new ByteSlice()), new Msgtable( new ByteSlice("isRef"), new ByteSlice()), new Msgtable( new ByteSlice("isOut"), new ByteSlice()), new Msgtable( new ByteSlice("isLazy"), new ByteSlice()), new Msgtable( new ByteSlice("hasMember"), new ByteSlice()), new Msgtable( new ByteSlice("identifier"), new ByteSlice()), new Msgtable( new ByteSlice("getProtection"), new ByteSlice()), new Msgtable( new ByteSlice("parent"), new ByteSlice()), new Msgtable( new ByteSlice("getMember"), new ByteSlice()), new Msgtable( new ByteSlice("getOverloads"), new ByteSlice()), new Msgtable( new ByteSlice("getVirtualFunctions"), new ByteSlice()), new Msgtable( new ByteSlice("getVirtualMethods"), new ByteSlice()), new Msgtable( new ByteSlice("classInstanceSize"), new ByteSlice()), new Msgtable( new ByteSlice("allMembers"), new ByteSlice()), new Msgtable( new ByteSlice("derivedMembers"), new ByteSlice()), new Msgtable( new ByteSlice("isSame"), new ByteSlice()), new Msgtable( new ByteSlice("compiles"), new ByteSlice()), new Msgtable( new ByteSlice("parameters"), new ByteSlice()), new Msgtable( new ByteSlice("getAliasThis"), new ByteSlice()), new Msgtable( new ByteSlice("getAttributes"), new ByteSlice()), new Msgtable( new ByteSlice("getFunctionAttributes"), new ByteSlice()), new Msgtable( new ByteSlice("getFunctionVariadicStyle"), new ByteSlice()), new Msgtable( new ByteSlice("getParameterStorageClasses"), new ByteSlice()), new Msgtable( new ByteSlice("getLinkage"), new ByteSlice()), new Msgtable( new ByteSlice("getUnitTests"), new ByteSlice()), new Msgtable( new ByteSlice("getVirtualIndex"), new ByteSlice()), new Msgtable( new ByteSlice("getPointerBitmap"), new ByteSlice()), new Msgtable( new ByteSlice("isReturnOnStack"), new ByteSlice()), new Msgtable( new ByteSlice("isZeroInit"), new ByteSlice()), new Msgtable( new ByteSlice("getTargetInfo"), new ByteSlice()), new Msgtable( new ByteSlice("getLocation"), new ByteSlice()), new Msgtable( new ByteSlice("allocator"), new ByteSlice()), new Msgtable( new ByteSlice("basic_string"), new ByteSlice()), new Msgtable( new ByteSlice("basic_istream"), new ByteSlice()), new Msgtable( new ByteSlice("basic_ostream"), new ByteSlice()), new Msgtable( new ByteSlice("basic_iostream"), new ByteSlice()), new Msgtable( new ByteSlice("char_traits"), new ByteSlice()), new Msgtable( new ByteSlice("udaSelector"),  new ByteSlice("selector")), new Msgtable( new ByteSlice("NULL"), new ByteSlice()), new Msgtable( new ByteSlice("TRUE"), new ByteSlice()), new Msgtable( new ByteSlice("FALSE"), new ByteSlice()), new Msgtable( new ByteSlice("unsigned"), new ByteSlice()), new Msgtable( new ByteSlice("wchar_t"), new ByteSlice())};

    public static class Id
    {
        static Identifier IUnknown;
        static Identifier Object;
        static Identifier object;
        static Identifier string;
        static Identifier wstring;
        static Identifier dstring;
        static Identifier max;
        static Identifier min;
        static Identifier This;
        static Identifier _super;
        static Identifier ctor;
        static Identifier dtor;
        static Identifier __xdtor;
        static Identifier __fieldDtor;
        static Identifier __aggrDtor;
        static Identifier cppdtor;
        static Identifier ticppdtor;
        static Identifier postblit;
        static Identifier __xpostblit;
        static Identifier __fieldPostblit;
        static Identifier __aggrPostblit;
        static Identifier classInvariant;
        static Identifier unitTest;
        static Identifier require;
        static Identifier ensure;
        static Identifier capture;
        static Identifier this2;
        static Identifier _init;
        static Identifier __sizeof;
        static Identifier __xalignof;
        static Identifier _mangleof;
        static Identifier stringof;
        static Identifier _tupleof;
        static Identifier length;
        static Identifier remove;
        static Identifier ptr;
        static Identifier array;
        static Identifier funcptr;
        static Identifier dollar;
        static Identifier ctfe;
        static Identifier offset;
        static Identifier offsetof;
        static Identifier ModuleInfo;
        static Identifier ClassInfo;
        static Identifier classinfo;
        static Identifier typeinfo;
        static Identifier outer;
        static Identifier Exception;
        static Identifier RTInfo;
        static Identifier Throwable;
        static Identifier Error;
        static Identifier withSym;
        static Identifier result;
        static Identifier returnLabel;
        static Identifier line;
        static Identifier empty;
        static Identifier p;
        static Identifier q;
        static Identifier __vptr;
        static Identifier __monitor;
        static Identifier gate;
        static Identifier __c_long;
        static Identifier __c_ulong;
        static Identifier __c_longlong;
        static Identifier __c_ulonglong;
        static Identifier __c_long_double;
        static Identifier __c_wchar_t;
        static Identifier cpp_type_info_ptr;
        static Identifier _assert;
        static Identifier _unittest;
        static Identifier _body;
        static Identifier TypeInfo;
        static Identifier TypeInfo_Class;
        static Identifier TypeInfo_Interface;
        static Identifier TypeInfo_Struct;
        static Identifier TypeInfo_Enum;
        static Identifier TypeInfo_Pointer;
        static Identifier TypeInfo_Vector;
        static Identifier TypeInfo_Array;
        static Identifier TypeInfo_StaticArray;
        static Identifier TypeInfo_AssociativeArray;
        static Identifier TypeInfo_Function;
        static Identifier TypeInfo_Delegate;
        static Identifier TypeInfo_Tuple;
        static Identifier TypeInfo_Const;
        static Identifier TypeInfo_Invariant;
        static Identifier TypeInfo_Shared;
        static Identifier TypeInfo_Wild;
        static Identifier elements;
        static Identifier _arguments_typeinfo;
        static Identifier _arguments;
        static Identifier _argptr;
        static Identifier destroy;
        static Identifier xopEquals;
        static Identifier xopCmp;
        static Identifier xtoHash;
        static Identifier LINE;
        static Identifier FILE;
        static Identifier MODULE;
        static Identifier FUNCTION;
        static Identifier PRETTY_FUNCTION;
        static Identifier DATE;
        static Identifier TIME;
        static Identifier TIMESTAMP;
        static Identifier VENDOR;
        static Identifier VERSIONX;
        static Identifier EOFX;
        static Identifier nan;
        static Identifier infinity;
        static Identifier dig;
        static Identifier epsilon;
        static Identifier mant_dig;
        static Identifier max_10_exp;
        static Identifier max_exp;
        static Identifier min_10_exp;
        static Identifier min_exp;
        static Identifier min_normal;
        static Identifier re;
        static Identifier im;
        static Identifier C;
        static Identifier D;
        static Identifier Windows;
        static Identifier Pascal;
        static Identifier System;
        static Identifier Objective;
        static Identifier exit;
        static Identifier success;
        static Identifier failure;
        static Identifier keys;
        static Identifier values;
        static Identifier rehash;
        static Identifier future;
        static Identifier property;
        static Identifier nogc;
        static Identifier safe;
        static Identifier trusted;
        static Identifier system;
        static Identifier disable;
        static Identifier ___out;
        static Identifier ___in;
        static Identifier __int;
        static Identifier _dollar;
        static Identifier __LOCAL_SIZE;
        static Identifier uadd;
        static Identifier neg;
        static Identifier com;
        static Identifier add;
        static Identifier add_r;
        static Identifier sub;
        static Identifier sub_r;
        static Identifier mul;
        static Identifier mul_r;
        static Identifier div;
        static Identifier div_r;
        static Identifier mod;
        static Identifier mod_r;
        static Identifier eq;
        static Identifier cmp;
        static Identifier iand;
        static Identifier iand_r;
        static Identifier ior;
        static Identifier ior_r;
        static Identifier ixor;
        static Identifier ixor_r;
        static Identifier shl;
        static Identifier shl_r;
        static Identifier shr;
        static Identifier shr_r;
        static Identifier ushr;
        static Identifier ushr_r;
        static Identifier cat;
        static Identifier cat_r;
        static Identifier assign;
        static Identifier addass;
        static Identifier subass;
        static Identifier mulass;
        static Identifier divass;
        static Identifier modass;
        static Identifier andass;
        static Identifier orass;
        static Identifier xorass;
        static Identifier shlass;
        static Identifier shrass;
        static Identifier ushrass;
        static Identifier catass;
        static Identifier postinc;
        static Identifier postdec;
        static Identifier index;
        static Identifier indexass;
        static Identifier slice;
        static Identifier sliceass;
        static Identifier call;
        static Identifier _cast;
        static Identifier opIn;
        static Identifier opIn_r;
        static Identifier opStar;
        static Identifier opDot;
        static Identifier opDispatch;
        static Identifier opDollar;
        static Identifier opUnary;
        static Identifier opIndexUnary;
        static Identifier opSliceUnary;
        static Identifier opBinary;
        static Identifier opBinaryRight;
        static Identifier opOpAssign;
        static Identifier opIndexOpAssign;
        static Identifier opSliceOpAssign;
        static Identifier pow;
        static Identifier pow_r;
        static Identifier powass;
        static Identifier classNew;
        static Identifier classDelete;
        static Identifier apply;
        static Identifier applyReverse;
        static Identifier Fempty;
        static Identifier Ffront;
        static Identifier Fback;
        static Identifier FpopFront;
        static Identifier FpopBack;
        static Identifier aaLen;
        static Identifier aaKeys;
        static Identifier aaValues;
        static Identifier aaRehash;
        static Identifier monitorenter;
        static Identifier monitorexit;
        static Identifier criticalenter;
        static Identifier criticalexit;
        static Identifier __ArrayEq;
        static Identifier __ArrayPostblit;
        static Identifier __ArrayDtor;
        static Identifier _d_delThrowable;
        static Identifier _d_assert_fail;
        static Identifier dup;
        static Identifier _aaApply;
        static Identifier _aaApply2;
        static Identifier Pinline;
        static Identifier lib;
        static Identifier linkerDirective;
        static Identifier mangle;
        static Identifier msg;
        static Identifier startaddress;
        static Identifier crt_constructor;
        static Identifier crt_destructor;
        static Identifier tohash;
        static Identifier tostring;
        static Identifier getmembers;
        static Identifier __alloca;
        static Identifier main;
        static Identifier WinMain;
        static Identifier DllMain;
        static Identifier tls_get_addr;
        static Identifier entrypoint;
        static Identifier rt_init;
        static Identifier __cmp;
        static Identifier __equals;
        static Identifier __switch;
        static Identifier __switch_error;
        static Identifier __ArrayCast;
        static Identifier va_start;
        static Identifier std;
        static Identifier core;
        static Identifier etc;
        static Identifier attribute;
        static Identifier math;
        static Identifier sin;
        static Identifier cos;
        static Identifier tan;
        static Identifier _sqrt;
        static Identifier _pow;
        static Identifier atan2;
        static Identifier rndtol;
        static Identifier expm1;
        static Identifier exp2;
        static Identifier yl2x;
        static Identifier yl2xp1;
        static Identifier fabs;
        static Identifier bitop;
        static Identifier bsf;
        static Identifier bsr;
        static Identifier bswap;
        static Identifier isAbstractClass;
        static Identifier isArithmetic;
        static Identifier isAssociativeArray;
        static Identifier isFinalClass;
        static Identifier isTemplate;
        static Identifier isPOD;
        static Identifier isDeprecated;
        static Identifier isDisabled;
        static Identifier isFuture;
        static Identifier isNested;
        static Identifier isFloating;
        static Identifier isIntegral;
        static Identifier isScalar;
        static Identifier isStaticArray;
        static Identifier isUnsigned;
        static Identifier isVirtualFunction;
        static Identifier isVirtualMethod;
        static Identifier isAbstractFunction;
        static Identifier isFinalFunction;
        static Identifier isOverrideFunction;
        static Identifier isStaticFunction;
        static Identifier isModule;
        static Identifier isPackage;
        static Identifier isRef;
        static Identifier isOut;
        static Identifier isLazy;
        static Identifier hasMember;
        static Identifier identifier;
        static Identifier getProtection;
        static Identifier parent;
        static Identifier getMember;
        static Identifier getOverloads;
        static Identifier getVirtualFunctions;
        static Identifier getVirtualMethods;
        static Identifier classInstanceSize;
        static Identifier allMembers;
        static Identifier derivedMembers;
        static Identifier isSame;
        static Identifier compiles;
        static Identifier parameters;
        static Identifier getAliasThis;
        static Identifier getAttributes;
        static Identifier getFunctionAttributes;
        static Identifier getFunctionVariadicStyle;
        static Identifier getParameterStorageClasses;
        static Identifier getLinkage;
        static Identifier getUnitTests;
        static Identifier getVirtualIndex;
        static Identifier getPointerBitmap;
        static Identifier isReturnOnStack;
        static Identifier isZeroInit;
        static Identifier getTargetInfo;
        static Identifier getLocation;
        static Identifier allocator;
        static Identifier basic_string;
        static Identifier basic_istream;
        static Identifier basic_ostream;
        static Identifier basic_iostream;
        static Identifier char_traits;
        static Identifier udaSelector;
        static Identifier NULL;
        static Identifier TRUE;
        static Identifier FALSE;
        static Identifier unsigned;
        static Identifier wchar_t;
        public static void initialize() {
            IUnknown = Identifier.idPool( new ByteSlice("IUnknown"));
            Object = Identifier.idPool( new ByteSlice("Object"));
            object = Identifier.idPool( new ByteSlice("object"));
            string = Identifier.idPool( new ByteSlice("string"));
            wstring = Identifier.idPool( new ByteSlice("wstring"));
            dstring = Identifier.idPool( new ByteSlice("dstring"));
            max = Identifier.idPool( new ByteSlice("max"));
            min = Identifier.idPool( new ByteSlice("min"));
            This = Identifier.idPool( new ByteSlice("this"));
            _super = Identifier.idPool( new ByteSlice("super"));
            ctor = Identifier.idPool( new ByteSlice("__ctor"));
            dtor = Identifier.idPool( new ByteSlice("__dtor"));
            __xdtor = Identifier.idPool( new ByteSlice("__xdtor"));
            __fieldDtor = Identifier.idPool( new ByteSlice("__fieldDtor"));
            __aggrDtor = Identifier.idPool( new ByteSlice("__aggrDtor"));
            cppdtor = Identifier.idPool( new ByteSlice("__cppdtor"));
            ticppdtor = Identifier.idPool( new ByteSlice("__ticppdtor"));
            postblit = Identifier.idPool( new ByteSlice("__postblit"));
            __xpostblit = Identifier.idPool( new ByteSlice("__xpostblit"));
            __fieldPostblit = Identifier.idPool( new ByteSlice("__fieldPostblit"));
            __aggrPostblit = Identifier.idPool( new ByteSlice("__aggrPostblit"));
            classInvariant = Identifier.idPool( new ByteSlice("__invariant"));
            unitTest = Identifier.idPool( new ByteSlice("__unitTest"));
            require = Identifier.idPool( new ByteSlice("__require"));
            ensure = Identifier.idPool( new ByteSlice("__ensure"));
            capture = Identifier.idPool( new ByteSlice("__capture"));
            this2 = Identifier.idPool( new ByteSlice("__this"));
            _init = Identifier.idPool( new ByteSlice("init"));
            __sizeof = Identifier.idPool( new ByteSlice("sizeof"));
            __xalignof = Identifier.idPool( new ByteSlice("alignof"));
            _mangleof = Identifier.idPool( new ByteSlice("mangleof"));
            stringof = Identifier.idPool( new ByteSlice("stringof"));
            _tupleof = Identifier.idPool( new ByteSlice("tupleof"));
            length = Identifier.idPool( new ByteSlice("length"));
            remove = Identifier.idPool( new ByteSlice("remove"));
            ptr = Identifier.idPool( new ByteSlice("ptr"));
            array = Identifier.idPool( new ByteSlice("array"));
            funcptr = Identifier.idPool( new ByteSlice("funcptr"));
            dollar = Identifier.idPool( new ByteSlice("__dollar"));
            ctfe = Identifier.idPool( new ByteSlice("__ctfe"));
            offset = Identifier.idPool( new ByteSlice("offset"));
            offsetof = Identifier.idPool( new ByteSlice("offsetof"));
            ModuleInfo = Identifier.idPool( new ByteSlice("ModuleInfo"));
            ClassInfo = Identifier.idPool( new ByteSlice("ClassInfo"));
            classinfo = Identifier.idPool( new ByteSlice("classinfo"));
            typeinfo = Identifier.idPool( new ByteSlice("typeinfo"));
            outer = Identifier.idPool( new ByteSlice("outer"));
            Exception = Identifier.idPool( new ByteSlice("Exception"));
            RTInfo = Identifier.idPool( new ByteSlice("RTInfo"));
            Throwable = Identifier.idPool( new ByteSlice("Throwable"));
            Error = Identifier.idPool( new ByteSlice("Error"));
            withSym = Identifier.idPool( new ByteSlice("__withSym"));
            result = Identifier.idPool( new ByteSlice("__result"));
            returnLabel = Identifier.idPool( new ByteSlice("__returnLabel"));
            line = Identifier.idPool( new ByteSlice("line"));
            empty = Identifier.idPool( new ByteSlice(""));
            p = Identifier.idPool( new ByteSlice("p"));
            q = Identifier.idPool( new ByteSlice("q"));
            __vptr = Identifier.idPool( new ByteSlice("__vptr"));
            __monitor = Identifier.idPool( new ByteSlice("__monitor"));
            gate = Identifier.idPool( new ByteSlice("__gate"));
            __c_long = Identifier.idPool( new ByteSlice("__c_long"));
            __c_ulong = Identifier.idPool( new ByteSlice("__c_ulong"));
            __c_longlong = Identifier.idPool( new ByteSlice("__c_longlong"));
            __c_ulonglong = Identifier.idPool( new ByteSlice("__c_ulonglong"));
            __c_long_double = Identifier.idPool( new ByteSlice("__c_long_double"));
            __c_wchar_t = Identifier.idPool( new ByteSlice("__c_wchar_t"));
            cpp_type_info_ptr = Identifier.idPool( new ByteSlice("__cpp_type_info_ptr"));
            _assert = Identifier.idPool( new ByteSlice("assert"));
            _unittest = Identifier.idPool( new ByteSlice("unittest"));
            _body = Identifier.idPool( new ByteSlice("body"));
            TypeInfo = Identifier.idPool( new ByteSlice("TypeInfo"));
            TypeInfo_Class = Identifier.idPool( new ByteSlice("TypeInfo_Class"));
            TypeInfo_Interface = Identifier.idPool( new ByteSlice("TypeInfo_Interface"));
            TypeInfo_Struct = Identifier.idPool( new ByteSlice("TypeInfo_Struct"));
            TypeInfo_Enum = Identifier.idPool( new ByteSlice("TypeInfo_Enum"));
            TypeInfo_Pointer = Identifier.idPool( new ByteSlice("TypeInfo_Pointer"));
            TypeInfo_Vector = Identifier.idPool( new ByteSlice("TypeInfo_Vector"));
            TypeInfo_Array = Identifier.idPool( new ByteSlice("TypeInfo_Array"));
            TypeInfo_StaticArray = Identifier.idPool( new ByteSlice("TypeInfo_StaticArray"));
            TypeInfo_AssociativeArray = Identifier.idPool( new ByteSlice("TypeInfo_AssociativeArray"));
            TypeInfo_Function = Identifier.idPool( new ByteSlice("TypeInfo_Function"));
            TypeInfo_Delegate = Identifier.idPool( new ByteSlice("TypeInfo_Delegate"));
            TypeInfo_Tuple = Identifier.idPool( new ByteSlice("TypeInfo_Tuple"));
            TypeInfo_Const = Identifier.idPool( new ByteSlice("TypeInfo_Const"));
            TypeInfo_Invariant = Identifier.idPool( new ByteSlice("TypeInfo_Invariant"));
            TypeInfo_Shared = Identifier.idPool( new ByteSlice("TypeInfo_Shared"));
            TypeInfo_Wild = Identifier.idPool( new ByteSlice("TypeInfo_Inout"));
            elements = Identifier.idPool( new ByteSlice("elements"));
            _arguments_typeinfo = Identifier.idPool( new ByteSlice("_arguments_typeinfo"));
            _arguments = Identifier.idPool( new ByteSlice("_arguments"));
            _argptr = Identifier.idPool( new ByteSlice("_argptr"));
            destroy = Identifier.idPool( new ByteSlice("destroy"));
            xopEquals = Identifier.idPool( new ByteSlice("__xopEquals"));
            xopCmp = Identifier.idPool( new ByteSlice("__xopCmp"));
            xtoHash = Identifier.idPool( new ByteSlice("__xtoHash"));
            LINE = Identifier.idPool( new ByteSlice("__LINE__"));
            FILE = Identifier.idPool( new ByteSlice("__FILE__"));
            MODULE = Identifier.idPool( new ByteSlice("__MODULE__"));
            FUNCTION = Identifier.idPool( new ByteSlice("__FUNCTION__"));
            PRETTY_FUNCTION = Identifier.idPool( new ByteSlice("__PRETTY_FUNCTION__"));
            DATE = Identifier.idPool( new ByteSlice("__DATE__"));
            TIME = Identifier.idPool( new ByteSlice("__TIME__"));
            TIMESTAMP = Identifier.idPool( new ByteSlice("__TIMESTAMP__"));
            VENDOR = Identifier.idPool( new ByteSlice("__VENDOR__"));
            VERSIONX = Identifier.idPool( new ByteSlice("__VERSION__"));
            EOFX = Identifier.idPool( new ByteSlice("__EOF__"));
            nan = Identifier.idPool( new ByteSlice("nan"));
            infinity = Identifier.idPool( new ByteSlice("infinity"));
            dig = Identifier.idPool( new ByteSlice("dig"));
            epsilon = Identifier.idPool( new ByteSlice("epsilon"));
            mant_dig = Identifier.idPool( new ByteSlice("mant_dig"));
            max_10_exp = Identifier.idPool( new ByteSlice("max_10_exp"));
            max_exp = Identifier.idPool( new ByteSlice("max_exp"));
            min_10_exp = Identifier.idPool( new ByteSlice("min_10_exp"));
            min_exp = Identifier.idPool( new ByteSlice("min_exp"));
            min_normal = Identifier.idPool( new ByteSlice("min_normal"));
            re = Identifier.idPool( new ByteSlice("re"));
            im = Identifier.idPool( new ByteSlice("im"));
            C = Identifier.idPool( new ByteSlice("C"));
            D = Identifier.idPool( new ByteSlice("D"));
            Windows = Identifier.idPool( new ByteSlice("Windows"));
            Pascal = Identifier.idPool( new ByteSlice("Pascal"));
            System = Identifier.idPool( new ByteSlice("System"));
            Objective = Identifier.idPool( new ByteSlice("Objective"));
            exit = Identifier.idPool( new ByteSlice("exit"));
            success = Identifier.idPool( new ByteSlice("success"));
            failure = Identifier.idPool( new ByteSlice("failure"));
            keys = Identifier.idPool( new ByteSlice("keys"));
            values = Identifier.idPool( new ByteSlice("values"));
            rehash = Identifier.idPool( new ByteSlice("rehash"));
            future = Identifier.idPool( new ByteSlice("__future"));
            property = Identifier.idPool( new ByteSlice("property"));
            nogc = Identifier.idPool( new ByteSlice("nogc"));
            safe = Identifier.idPool( new ByteSlice("safe"));
            trusted = Identifier.idPool( new ByteSlice("trusted"));
            system = Identifier.idPool( new ByteSlice("system"));
            disable = Identifier.idPool( new ByteSlice("disable"));
            ___out = Identifier.idPool( new ByteSlice("out"));
            ___in = Identifier.idPool( new ByteSlice("in"));
            __int = Identifier.idPool( new ByteSlice("int"));
            _dollar = Identifier.idPool( new ByteSlice("$"));
            __LOCAL_SIZE = Identifier.idPool( new ByteSlice("__LOCAL_SIZE"));
            uadd = Identifier.idPool( new ByteSlice("opPos"));
            neg = Identifier.idPool( new ByteSlice("opNeg"));
            com = Identifier.idPool( new ByteSlice("opCom"));
            add = Identifier.idPool( new ByteSlice("opAdd"));
            add_r = Identifier.idPool( new ByteSlice("opAdd_r"));
            sub = Identifier.idPool( new ByteSlice("opSub"));
            sub_r = Identifier.idPool( new ByteSlice("opSub_r"));
            mul = Identifier.idPool( new ByteSlice("opMul"));
            mul_r = Identifier.idPool( new ByteSlice("opMul_r"));
            div = Identifier.idPool( new ByteSlice("opDiv"));
            div_r = Identifier.idPool( new ByteSlice("opDiv_r"));
            mod = Identifier.idPool( new ByteSlice("opMod"));
            mod_r = Identifier.idPool( new ByteSlice("opMod_r"));
            eq = Identifier.idPool( new ByteSlice("opEquals"));
            cmp = Identifier.idPool( new ByteSlice("opCmp"));
            iand = Identifier.idPool( new ByteSlice("opAnd"));
            iand_r = Identifier.idPool( new ByteSlice("opAnd_r"));
            ior = Identifier.idPool( new ByteSlice("opOr"));
            ior_r = Identifier.idPool( new ByteSlice("opOr_r"));
            ixor = Identifier.idPool( new ByteSlice("opXor"));
            ixor_r = Identifier.idPool( new ByteSlice("opXor_r"));
            shl = Identifier.idPool( new ByteSlice("opShl"));
            shl_r = Identifier.idPool( new ByteSlice("opShl_r"));
            shr = Identifier.idPool( new ByteSlice("opShr"));
            shr_r = Identifier.idPool( new ByteSlice("opShr_r"));
            ushr = Identifier.idPool( new ByteSlice("opUShr"));
            ushr_r = Identifier.idPool( new ByteSlice("opUShr_r"));
            cat = Identifier.idPool( new ByteSlice("opCat"));
            cat_r = Identifier.idPool( new ByteSlice("opCat_r"));
            assign = Identifier.idPool( new ByteSlice("opAssign"));
            addass = Identifier.idPool( new ByteSlice("opAddAssign"));
            subass = Identifier.idPool( new ByteSlice("opSubAssign"));
            mulass = Identifier.idPool( new ByteSlice("opMulAssign"));
            divass = Identifier.idPool( new ByteSlice("opDivAssign"));
            modass = Identifier.idPool( new ByteSlice("opModAssign"));
            andass = Identifier.idPool( new ByteSlice("opAndAssign"));
            orass = Identifier.idPool( new ByteSlice("opOrAssign"));
            xorass = Identifier.idPool( new ByteSlice("opXorAssign"));
            shlass = Identifier.idPool( new ByteSlice("opShlAssign"));
            shrass = Identifier.idPool( new ByteSlice("opShrAssign"));
            ushrass = Identifier.idPool( new ByteSlice("opUShrAssign"));
            catass = Identifier.idPool( new ByteSlice("opCatAssign"));
            postinc = Identifier.idPool( new ByteSlice("opPostInc"));
            postdec = Identifier.idPool( new ByteSlice("opPostDec"));
            index = Identifier.idPool( new ByteSlice("opIndex"));
            indexass = Identifier.idPool( new ByteSlice("opIndexAssign"));
            slice = Identifier.idPool( new ByteSlice("opSlice"));
            sliceass = Identifier.idPool( new ByteSlice("opSliceAssign"));
            call = Identifier.idPool( new ByteSlice("opCall"));
            _cast = Identifier.idPool( new ByteSlice("opCast"));
            opIn = Identifier.idPool( new ByteSlice("opIn"));
            opIn_r = Identifier.idPool( new ByteSlice("opIn_r"));
            opStar = Identifier.idPool( new ByteSlice("opStar"));
            opDot = Identifier.idPool( new ByteSlice("opDot"));
            opDispatch = Identifier.idPool( new ByteSlice("opDispatch"));
            opDollar = Identifier.idPool( new ByteSlice("opDollar"));
            opUnary = Identifier.idPool( new ByteSlice("opUnary"));
            opIndexUnary = Identifier.idPool( new ByteSlice("opIndexUnary"));
            opSliceUnary = Identifier.idPool( new ByteSlice("opSliceUnary"));
            opBinary = Identifier.idPool( new ByteSlice("opBinary"));
            opBinaryRight = Identifier.idPool( new ByteSlice("opBinaryRight"));
            opOpAssign = Identifier.idPool( new ByteSlice("opOpAssign"));
            opIndexOpAssign = Identifier.idPool( new ByteSlice("opIndexOpAssign"));
            opSliceOpAssign = Identifier.idPool( new ByteSlice("opSliceOpAssign"));
            pow = Identifier.idPool( new ByteSlice("opPow"));
            pow_r = Identifier.idPool( new ByteSlice("opPow_r"));
            powass = Identifier.idPool( new ByteSlice("opPowAssign"));
            classNew = Identifier.idPool( new ByteSlice("new"));
            classDelete = Identifier.idPool( new ByteSlice("delete"));
            apply = Identifier.idPool( new ByteSlice("opApply"));
            applyReverse = Identifier.idPool( new ByteSlice("opApplyReverse"));
            Fempty = Identifier.idPool( new ByteSlice("empty"));
            Ffront = Identifier.idPool( new ByteSlice("front"));
            Fback = Identifier.idPool( new ByteSlice("back"));
            FpopFront = Identifier.idPool( new ByteSlice("popFront"));
            FpopBack = Identifier.idPool( new ByteSlice("popBack"));
            aaLen = Identifier.idPool( new ByteSlice("_aaLen"));
            aaKeys = Identifier.idPool( new ByteSlice("_aaKeys"));
            aaValues = Identifier.idPool( new ByteSlice("_aaValues"));
            aaRehash = Identifier.idPool( new ByteSlice("_aaRehash"));
            monitorenter = Identifier.idPool( new ByteSlice("_d_monitorenter"));
            monitorexit = Identifier.idPool( new ByteSlice("_d_monitorexit"));
            criticalenter = Identifier.idPool( new ByteSlice("_d_criticalenter"));
            criticalexit = Identifier.idPool( new ByteSlice("_d_criticalexit"));
            __ArrayEq = Identifier.idPool( new ByteSlice("__ArrayEq"));
            __ArrayPostblit = Identifier.idPool( new ByteSlice("__ArrayPostblit"));
            __ArrayDtor = Identifier.idPool( new ByteSlice("__ArrayDtor"));
            _d_delThrowable = Identifier.idPool( new ByteSlice("_d_delThrowable"));
            _d_assert_fail = Identifier.idPool( new ByteSlice("_d_assert_fail"));
            dup = Identifier.idPool( new ByteSlice("dup"));
            _aaApply = Identifier.idPool( new ByteSlice("_aaApply"));
            _aaApply2 = Identifier.idPool( new ByteSlice("_aaApply2"));
            Pinline = Identifier.idPool( new ByteSlice("inline"));
            lib = Identifier.idPool( new ByteSlice("lib"));
            linkerDirective = Identifier.idPool( new ByteSlice("linkerDirective"));
            mangle = Identifier.idPool( new ByteSlice("mangle"));
            msg = Identifier.idPool( new ByteSlice("msg"));
            startaddress = Identifier.idPool( new ByteSlice("startaddress"));
            crt_constructor = Identifier.idPool( new ByteSlice("crt_constructor"));
            crt_destructor = Identifier.idPool( new ByteSlice("crt_destructor"));
            tohash = Identifier.idPool( new ByteSlice("toHash"));
            tostring = Identifier.idPool( new ByteSlice("toString"));
            getmembers = Identifier.idPool( new ByteSlice("getMembers"));
            __alloca = Identifier.idPool( new ByteSlice("alloca"));
            main = Identifier.idPool( new ByteSlice("main"));
            WinMain = Identifier.idPool( new ByteSlice("WinMain"));
            DllMain = Identifier.idPool( new ByteSlice("DllMain"));
            tls_get_addr = Identifier.idPool( new ByteSlice("___tls_get_addr"));
            entrypoint = Identifier.idPool( new ByteSlice("__entrypoint"));
            rt_init = Identifier.idPool( new ByteSlice("rt_init"));
            __cmp = Identifier.idPool( new ByteSlice("__cmp"));
            __equals = Identifier.idPool( new ByteSlice("__equals"));
            __switch = Identifier.idPool( new ByteSlice("__switch"));
            __switch_error = Identifier.idPool( new ByteSlice("__switch_error"));
            __ArrayCast = Identifier.idPool( new ByteSlice("__ArrayCast"));
            va_start = Identifier.idPool( new ByteSlice("va_start"));
            std = Identifier.idPool( new ByteSlice("std"));
            core = Identifier.idPool( new ByteSlice("core"));
            etc = Identifier.idPool( new ByteSlice("etc"));
            attribute = Identifier.idPool( new ByteSlice("attribute"));
            math = Identifier.idPool( new ByteSlice("math"));
            sin = Identifier.idPool( new ByteSlice("sin"));
            cos = Identifier.idPool( new ByteSlice("cos"));
            tan = Identifier.idPool( new ByteSlice("tan"));
            _sqrt = Identifier.idPool( new ByteSlice("sqrt"));
            _pow = Identifier.idPool( new ByteSlice("pow"));
            atan2 = Identifier.idPool( new ByteSlice("atan2"));
            rndtol = Identifier.idPool( new ByteSlice("rndtol"));
            expm1 = Identifier.idPool( new ByteSlice("expm1"));
            exp2 = Identifier.idPool( new ByteSlice("exp2"));
            yl2x = Identifier.idPool( new ByteSlice("yl2x"));
            yl2xp1 = Identifier.idPool( new ByteSlice("yl2xp1"));
            fabs = Identifier.idPool( new ByteSlice("fabs"));
            bitop = Identifier.idPool( new ByteSlice("bitop"));
            bsf = Identifier.idPool( new ByteSlice("bsf"));
            bsr = Identifier.idPool( new ByteSlice("bsr"));
            bswap = Identifier.idPool( new ByteSlice("bswap"));
            isAbstractClass = Identifier.idPool( new ByteSlice("isAbstractClass"));
            isArithmetic = Identifier.idPool( new ByteSlice("isArithmetic"));
            isAssociativeArray = Identifier.idPool( new ByteSlice("isAssociativeArray"));
            isFinalClass = Identifier.idPool( new ByteSlice("isFinalClass"));
            isTemplate = Identifier.idPool( new ByteSlice("isTemplate"));
            isPOD = Identifier.idPool( new ByteSlice("isPOD"));
            isDeprecated = Identifier.idPool( new ByteSlice("isDeprecated"));
            isDisabled = Identifier.idPool( new ByteSlice("isDisabled"));
            isFuture = Identifier.idPool( new ByteSlice("isFuture"));
            isNested = Identifier.idPool( new ByteSlice("isNested"));
            isFloating = Identifier.idPool( new ByteSlice("isFloating"));
            isIntegral = Identifier.idPool( new ByteSlice("isIntegral"));
            isScalar = Identifier.idPool( new ByteSlice("isScalar"));
            isStaticArray = Identifier.idPool( new ByteSlice("isStaticArray"));
            isUnsigned = Identifier.idPool( new ByteSlice("isUnsigned"));
            isVirtualFunction = Identifier.idPool( new ByteSlice("isVirtualFunction"));
            isVirtualMethod = Identifier.idPool( new ByteSlice("isVirtualMethod"));
            isAbstractFunction = Identifier.idPool( new ByteSlice("isAbstractFunction"));
            isFinalFunction = Identifier.idPool( new ByteSlice("isFinalFunction"));
            isOverrideFunction = Identifier.idPool( new ByteSlice("isOverrideFunction"));
            isStaticFunction = Identifier.idPool( new ByteSlice("isStaticFunction"));
            isModule = Identifier.idPool( new ByteSlice("isModule"));
            isPackage = Identifier.idPool( new ByteSlice("isPackage"));
            isRef = Identifier.idPool( new ByteSlice("isRef"));
            isOut = Identifier.idPool( new ByteSlice("isOut"));
            isLazy = Identifier.idPool( new ByteSlice("isLazy"));
            hasMember = Identifier.idPool( new ByteSlice("hasMember"));
            identifier = Identifier.idPool( new ByteSlice("identifier"));
            getProtection = Identifier.idPool( new ByteSlice("getProtection"));
            parent = Identifier.idPool( new ByteSlice("parent"));
            getMember = Identifier.idPool( new ByteSlice("getMember"));
            getOverloads = Identifier.idPool( new ByteSlice("getOverloads"));
            getVirtualFunctions = Identifier.idPool( new ByteSlice("getVirtualFunctions"));
            getVirtualMethods = Identifier.idPool( new ByteSlice("getVirtualMethods"));
            classInstanceSize = Identifier.idPool( new ByteSlice("classInstanceSize"));
            allMembers = Identifier.idPool( new ByteSlice("allMembers"));
            derivedMembers = Identifier.idPool( new ByteSlice("derivedMembers"));
            isSame = Identifier.idPool( new ByteSlice("isSame"));
            compiles = Identifier.idPool( new ByteSlice("compiles"));
            parameters = Identifier.idPool( new ByteSlice("parameters"));
            getAliasThis = Identifier.idPool( new ByteSlice("getAliasThis"));
            getAttributes = Identifier.idPool( new ByteSlice("getAttributes"));
            getFunctionAttributes = Identifier.idPool( new ByteSlice("getFunctionAttributes"));
            getFunctionVariadicStyle = Identifier.idPool( new ByteSlice("getFunctionVariadicStyle"));
            getParameterStorageClasses = Identifier.idPool( new ByteSlice("getParameterStorageClasses"));
            getLinkage = Identifier.idPool( new ByteSlice("getLinkage"));
            getUnitTests = Identifier.idPool( new ByteSlice("getUnitTests"));
            getVirtualIndex = Identifier.idPool( new ByteSlice("getVirtualIndex"));
            getPointerBitmap = Identifier.idPool( new ByteSlice("getPointerBitmap"));
            isReturnOnStack = Identifier.idPool( new ByteSlice("isReturnOnStack"));
            isZeroInit = Identifier.idPool( new ByteSlice("isZeroInit"));
            getTargetInfo = Identifier.idPool( new ByteSlice("getTargetInfo"));
            getLocation = Identifier.idPool( new ByteSlice("getLocation"));
            allocator = Identifier.idPool( new ByteSlice("allocator"));
            basic_string = Identifier.idPool( new ByteSlice("basic_string"));
            basic_istream = Identifier.idPool( new ByteSlice("basic_istream"));
            basic_ostream = Identifier.idPool( new ByteSlice("basic_ostream"));
            basic_iostream = Identifier.idPool( new ByteSlice("basic_iostream"));
            char_traits = Identifier.idPool( new ByteSlice("char_traits"));
            udaSelector = Identifier.idPool( new ByteSlice("selector"));
            NULL = Identifier.idPool( new ByteSlice("NULL"));
            TRUE = Identifier.idPool( new ByteSlice("TRUE"));
            FALSE = Identifier.idPool( new ByteSlice("FALSE"));
            unsigned = Identifier.idPool( new ByteSlice("unsigned"));
            wchar_t = Identifier.idPool( new ByteSlice("wchar_t"));
        }

        public static void deinitialize() {
            IUnknown = null;
            Object = null;
            object = null;
            string = null;
            wstring = null;
            dstring = null;
            max = null;
            min = null;
            This = null;
            _super = null;
            ctor = null;
            dtor = null;
            __xdtor = null;
            __fieldDtor = null;
            __aggrDtor = null;
            cppdtor = null;
            ticppdtor = null;
            postblit = null;
            __xpostblit = null;
            __fieldPostblit = null;
            __aggrPostblit = null;
            classInvariant = null;
            unitTest = null;
            require = null;
            ensure = null;
            capture = null;
            this2 = null;
            _init = null;
            __sizeof = null;
            __xalignof = null;
            _mangleof = null;
            stringof = null;
            _tupleof = null;
            length = null;
            remove = null;
            ptr = null;
            array = null;
            funcptr = null;
            dollar = null;
            ctfe = null;
            offset = null;
            offsetof = null;
            ModuleInfo = null;
            ClassInfo = null;
            classinfo = null;
            typeinfo = null;
            outer = null;
            Exception = null;
            RTInfo = null;
            Throwable = null;
            Error = null;
            withSym = null;
            result = null;
            returnLabel = null;
            line = null;
            empty = null;
            p = null;
            q = null;
            __vptr = null;
            __monitor = null;
            gate = null;
            __c_long = null;
            __c_ulong = null;
            __c_longlong = null;
            __c_ulonglong = null;
            __c_long_double = null;
            __c_wchar_t = null;
            cpp_type_info_ptr = null;
            _assert = null;
            _unittest = null;
            _body = null;
            TypeInfo = null;
            TypeInfo_Class = null;
            TypeInfo_Interface = null;
            TypeInfo_Struct = null;
            TypeInfo_Enum = null;
            TypeInfo_Pointer = null;
            TypeInfo_Vector = null;
            TypeInfo_Array = null;
            TypeInfo_StaticArray = null;
            TypeInfo_AssociativeArray = null;
            TypeInfo_Function = null;
            TypeInfo_Delegate = null;
            TypeInfo_Tuple = null;
            TypeInfo_Const = null;
            TypeInfo_Invariant = null;
            TypeInfo_Shared = null;
            TypeInfo_Wild = null;
            elements = null;
            _arguments_typeinfo = null;
            _arguments = null;
            _argptr = null;
            destroy = null;
            xopEquals = null;
            xopCmp = null;
            xtoHash = null;
            LINE = null;
            FILE = null;
            MODULE = null;
            FUNCTION = null;
            PRETTY_FUNCTION = null;
            DATE = null;
            TIME = null;
            TIMESTAMP = null;
            VENDOR = null;
            VERSIONX = null;
            EOFX = null;
            nan = null;
            infinity = null;
            dig = null;
            epsilon = null;
            mant_dig = null;
            max_10_exp = null;
            max_exp = null;
            min_10_exp = null;
            min_exp = null;
            min_normal = null;
            re = null;
            im = null;
            C = null;
            D = null;
            Windows = null;
            Pascal = null;
            System = null;
            Objective = null;
            exit = null;
            success = null;
            failure = null;
            keys = null;
            values = null;
            rehash = null;
            future = null;
            property = null;
            nogc = null;
            safe = null;
            trusted = null;
            system = null;
            disable = null;
            ___out = null;
            ___in = null;
            __int = null;
            _dollar = null;
            __LOCAL_SIZE = null;
            uadd = null;
            neg = null;
            com = null;
            add = null;
            add_r = null;
            sub = null;
            sub_r = null;
            mul = null;
            mul_r = null;
            div = null;
            div_r = null;
            mod = null;
            mod_r = null;
            eq = null;
            cmp = null;
            iand = null;
            iand_r = null;
            ior = null;
            ior_r = null;
            ixor = null;
            ixor_r = null;
            shl = null;
            shl_r = null;
            shr = null;
            shr_r = null;
            ushr = null;
            ushr_r = null;
            cat = null;
            cat_r = null;
            assign = null;
            addass = null;
            subass = null;
            mulass = null;
            divass = null;
            modass = null;
            andass = null;
            orass = null;
            xorass = null;
            shlass = null;
            shrass = null;
            ushrass = null;
            catass = null;
            postinc = null;
            postdec = null;
            index = null;
            indexass = null;
            slice = null;
            sliceass = null;
            call = null;
            _cast = null;
            opIn = null;
            opIn_r = null;
            opStar = null;
            opDot = null;
            opDispatch = null;
            opDollar = null;
            opUnary = null;
            opIndexUnary = null;
            opSliceUnary = null;
            opBinary = null;
            opBinaryRight = null;
            opOpAssign = null;
            opIndexOpAssign = null;
            opSliceOpAssign = null;
            pow = null;
            pow_r = null;
            powass = null;
            classNew = null;
            classDelete = null;
            apply = null;
            applyReverse = null;
            Fempty = null;
            Ffront = null;
            Fback = null;
            FpopFront = null;
            FpopBack = null;
            aaLen = null;
            aaKeys = null;
            aaValues = null;
            aaRehash = null;
            monitorenter = null;
            monitorexit = null;
            criticalenter = null;
            criticalexit = null;
            __ArrayEq = null;
            __ArrayPostblit = null;
            __ArrayDtor = null;
            _d_delThrowable = null;
            _d_assert_fail = null;
            dup = null;
            _aaApply = null;
            _aaApply2 = null;
            Pinline = null;
            lib = null;
            linkerDirective = null;
            mangle = null;
            msg = null;
            startaddress = null;
            crt_constructor = null;
            crt_destructor = null;
            tohash = null;
            tostring = null;
            getmembers = null;
            __alloca = null;
            main = null;
            WinMain = null;
            DllMain = null;
            tls_get_addr = null;
            entrypoint = null;
            rt_init = null;
            __cmp = null;
            __equals = null;
            __switch = null;
            __switch_error = null;
            __ArrayCast = null;
            va_start = null;
            std = null;
            core = null;
            etc = null;
            attribute = null;
            math = null;
            sin = null;
            cos = null;
            tan = null;
            _sqrt = null;
            _pow = null;
            atan2 = null;
            rndtol = null;
            expm1 = null;
            exp2 = null;
            yl2x = null;
            yl2xp1 = null;
            fabs = null;
            bitop = null;
            bsf = null;
            bsr = null;
            bswap = null;
            isAbstractClass = null;
            isArithmetic = null;
            isAssociativeArray = null;
            isFinalClass = null;
            isTemplate = null;
            isPOD = null;
            isDeprecated = null;
            isDisabled = null;
            isFuture = null;
            isNested = null;
            isFloating = null;
            isIntegral = null;
            isScalar = null;
            isStaticArray = null;
            isUnsigned = null;
            isVirtualFunction = null;
            isVirtualMethod = null;
            isAbstractFunction = null;
            isFinalFunction = null;
            isOverrideFunction = null;
            isStaticFunction = null;
            isModule = null;
            isPackage = null;
            isRef = null;
            isOut = null;
            isLazy = null;
            hasMember = null;
            identifier = null;
            getProtection = null;
            parent = null;
            getMember = null;
            getOverloads = null;
            getVirtualFunctions = null;
            getVirtualMethods = null;
            classInstanceSize = null;
            allMembers = null;
            derivedMembers = null;
            isSame = null;
            compiles = null;
            parameters = null;
            getAliasThis = null;
            getAttributes = null;
            getFunctionAttributes = null;
            getFunctionVariadicStyle = null;
            getParameterStorageClasses = null;
            getLinkage = null;
            getUnitTests = null;
            getVirtualIndex = null;
            getPointerBitmap = null;
            isReturnOnStack = null;
            isZeroInit = null;
            getTargetInfo = null;
            getLocation = null;
            allocator = null;
            basic_string = null;
            basic_istream = null;
            basic_ostream = null;
            basic_iostream = null;
            char_traits = null;
            udaSelector = null;
            NULL = null;
            TRUE = null;
            FALSE = null;
            unsigned = null;
            wchar_t = null;
        }

        public Id(){
        }
        public Id copy(){
            Id r = new Id();
            return r;
        }
        public Id opAssign(Id that) {
            return this;
        }
    }
    static Slice<Msgtable> msgtable = slice(initializer_0);
    public static class Msgtable
    {
        public ByteSlice ident;
        public ByteSlice name_;
        public  ByteSlice name() {
            return this.name_.getLength() != 0 ? this.name_ : this.ident;
        }

        public Msgtable(){
        }
        public Msgtable copy(){
            Msgtable r = new Msgtable();
            r.ident = ident.copy();
            r.name_ = name_.copy();
            return r;
        }
        public Msgtable(ByteSlice ident, ByteSlice name_) {
            this.ident = ident;
            this.name_ = name_;
        }

        public Msgtable opAssign(Msgtable that) {
            this.ident = that.ident;
            this.name_ = that.name_;
            return this;
        }
    }
    public static ByteSlice generate(Slice<Msgtable> msgtable, Function1<Msgtable,ByteSlice> dg) {
        ByteSlice code = new ByteSlice();
        {
            Slice<Msgtable> __r26 = msgtable.copy();
            int __key25 = 0;
            for (; __key25 < __r26.getLength();__key25 += 1) {
                Msgtable m = __r26.get(__key25).copy();
                int i = __key25;
                if (i != 0)
                    code.append((byte)10);
                code.append((dg).invoke(m));
            }
        }
        return code;
    }

    public static ByteSlice identifier(Msgtable m) {
        return  new ByteSlice("Identifier ").concat(m.ident).concat( new ByteSlice(";"));
    }

    public static ByteSlice initializer(Msgtable m) {
        return m.ident.concat( new ByteSlice(" = Identifier.idPool(\"")).concat(m.name()).concat( new ByteSlice("\");"));
    }

    public static ByteSlice deinitializer(Msgtable m) {
        return m.ident.concat( new ByteSlice(" = Identifier.init;"));
    }

}
